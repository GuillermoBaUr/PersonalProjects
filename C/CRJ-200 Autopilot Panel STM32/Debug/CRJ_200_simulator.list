
CRJ_200_simulator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003260  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080033f8  080033f8  000043f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003410  08003410  0000517c  2**0
                  CONTENTS
  4 .ARM          00000008  08003410  08003410  00004410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003418  08003418  0000517c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003418  08003418  00004418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800341c  0800341c  0000441c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000017c  20000000  08003420  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  2000017c  0800359c  0000517c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000380  0800359c  00005380  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000517c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008a77  00000000  00000000  000051ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001821  00000000  00000000  0000dc23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000768  00000000  00000000  0000f448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005a5  00000000  00000000  0000fbb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015a96  00000000  00000000  00010155  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000092c2  00000000  00000000  00025beb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00086a0d  00000000  00000000  0002eead  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b58ba  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002078  00000000  00000000  000b5900  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a3  00000000  00000000  000b7978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	2000017c 	.word	0x2000017c
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080033e0 	.word	0x080033e0

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000180 	.word	0x20000180
 80001d4:	080033e0 	.word	0x080033e0

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c8:	b580      	push	{r7, lr}
 80004ca:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004cc:	f000 fe16 	bl	80010fc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004d0:	f000 f836 	bl	8000540 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d4:	f000 f8c8 	bl	8000668 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004d8:	f000 f89c 	bl	8000614 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  //HAL_UART_Receive_IT(&huart2, uart_rx_buffer, OUTPUT_DATA_SIZE);
  turnOffLED();
 80004dc:	f000 fc1c 	bl	8000d18 <turnOffLED>
  ptrHead = NULL;
 80004e0:	4b15      	ldr	r3, [pc, #84]	@ (8000538 <main+0x70>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  updateLeds();
 80004e6:	f000 fbfd 	bl	8000ce4 <updateLeds>
	  ptrHead = readDatabuttons(ptrHead);
 80004ea:	4b13      	ldr	r3, [pc, #76]	@ (8000538 <main+0x70>)
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4618      	mov	r0, r3
 80004f0:	f000 fc38 	bl	8000d64 <readDatabuttons>
 80004f4:	4603      	mov	r3, r0
 80004f6:	4a10      	ldr	r2, [pc, #64]	@ (8000538 <main+0x70>)
 80004f8:	6013      	str	r3, [r2, #0]
	  ptrHead = sendFromQueue(ptrHead);
 80004fa:	4b0f      	ldr	r3, [pc, #60]	@ (8000538 <main+0x70>)
 80004fc:	681b      	ldr	r3, [r3, #0]
 80004fe:	4618      	mov	r0, r3
 8000500:	f000 fb50 	bl	8000ba4 <sendFromQueue>
 8000504:	4603      	mov	r3, r0
 8000506:	4a0c      	ldr	r2, [pc, #48]	@ (8000538 <main+0x70>)
 8000508:	6013      	str	r3, [r2, #0]
	  if(encoderStorage[ENCODER_FLAG] == 1){
 800050a:	4b0c      	ldr	r3, [pc, #48]	@ (800053c <main+0x74>)
 800050c:	781b      	ldrb	r3, [r3, #0]
 800050e:	b2db      	uxtb	r3, r3
 8000510:	2b01      	cmp	r3, #1
 8000512:	d1e8      	bne.n	80004e6 <main+0x1e>
		  ptrHead = putToQueue(encoderStorage[ENCODER_INDEX], encoderStorage[ENCODER_DATA], 1, ptrHead);
 8000514:	4b09      	ldr	r3, [pc, #36]	@ (800053c <main+0x74>)
 8000516:	785b      	ldrb	r3, [r3, #1]
 8000518:	b2d8      	uxtb	r0, r3
 800051a:	4b08      	ldr	r3, [pc, #32]	@ (800053c <main+0x74>)
 800051c:	789b      	ldrb	r3, [r3, #2]
 800051e:	b2d9      	uxtb	r1, r3
 8000520:	4b05      	ldr	r3, [pc, #20]	@ (8000538 <main+0x70>)
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	2201      	movs	r2, #1
 8000526:	f000 fae5 	bl	8000af4 <putToQueue>
 800052a:	4603      	mov	r3, r0
 800052c:	4a02      	ldr	r2, [pc, #8]	@ (8000538 <main+0x70>)
 800052e:	6013      	str	r3, [r2, #0]
		  encoderStorage[ENCODER_FLAG] = 0;
 8000530:	4b02      	ldr	r3, [pc, #8]	@ (800053c <main+0x74>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]
	  updateLeds();
 8000536:	e7d6      	b.n	80004e6 <main+0x1e>
 8000538:	200001e4 	.word	0x200001e4
 800053c:	200001e0 	.word	0x200001e0

08000540 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b094      	sub	sp, #80	@ 0x50
 8000544:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000546:	f107 0320 	add.w	r3, r7, #32
 800054a:	2230      	movs	r2, #48	@ 0x30
 800054c:	2100      	movs	r1, #0
 800054e:	4618      	mov	r0, r3
 8000550:	f002 feb8 	bl	80032c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000554:	f107 030c 	add.w	r3, r7, #12
 8000558:	2200      	movs	r2, #0
 800055a:	601a      	str	r2, [r3, #0]
 800055c:	605a      	str	r2, [r3, #4]
 800055e:	609a      	str	r2, [r3, #8]
 8000560:	60da      	str	r2, [r3, #12]
 8000562:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	60bb      	str	r3, [r7, #8]
 8000568:	4b28      	ldr	r3, [pc, #160]	@ (800060c <SystemClock_Config+0xcc>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800056c:	4a27      	ldr	r2, [pc, #156]	@ (800060c <SystemClock_Config+0xcc>)
 800056e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000572:	6413      	str	r3, [r2, #64]	@ 0x40
 8000574:	4b25      	ldr	r3, [pc, #148]	@ (800060c <SystemClock_Config+0xcc>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000578:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800057c:	60bb      	str	r3, [r7, #8]
 800057e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000580:	2300      	movs	r3, #0
 8000582:	607b      	str	r3, [r7, #4]
 8000584:	4b22      	ldr	r3, [pc, #136]	@ (8000610 <SystemClock_Config+0xd0>)
 8000586:	681b      	ldr	r3, [r3, #0]
 8000588:	4a21      	ldr	r2, [pc, #132]	@ (8000610 <SystemClock_Config+0xd0>)
 800058a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800058e:	6013      	str	r3, [r2, #0]
 8000590:	4b1f      	ldr	r3, [pc, #124]	@ (8000610 <SystemClock_Config+0xd0>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000598:	607b      	str	r3, [r7, #4]
 800059a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800059c:	2302      	movs	r3, #2
 800059e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005a0:	2301      	movs	r3, #1
 80005a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005a4:	2310      	movs	r3, #16
 80005a6:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ac:	2300      	movs	r3, #0
 80005ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005b0:	2310      	movs	r3, #16
 80005b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005b4:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005b8:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005ba:	2304      	movs	r3, #4
 80005bc:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80005be:	2304      	movs	r3, #4
 80005c0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005c2:	f107 0320 	add.w	r3, r7, #32
 80005c6:	4618      	mov	r0, r3
 80005c8:	f001 f97c 	bl	80018c4 <HAL_RCC_OscConfig>
 80005cc:	4603      	mov	r3, r0
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d001      	beq.n	80005d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005d2:	f000 fc27 	bl	8000e24 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005d6:	230f      	movs	r3, #15
 80005d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005da:	2302      	movs	r3, #2
 80005dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005de:	2300      	movs	r3, #0
 80005e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005e2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005ec:	f107 030c 	add.w	r3, r7, #12
 80005f0:	2102      	movs	r1, #2
 80005f2:	4618      	mov	r0, r3
 80005f4:	f001 fbde 	bl	8001db4 <HAL_RCC_ClockConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80005fe:	f000 fc11 	bl	8000e24 <Error_Handler>
  }
}
 8000602:	bf00      	nop
 8000604:	3750      	adds	r7, #80	@ 0x50
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
 800060a:	bf00      	nop
 800060c:	40023800 	.word	0x40023800
 8000610:	40007000 	.word	0x40007000

08000614 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000614:	b580      	push	{r7, lr}
 8000616:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000618:	4b11      	ldr	r3, [pc, #68]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 800061a:	4a12      	ldr	r2, [pc, #72]	@ (8000664 <MX_USART2_UART_Init+0x50>)
 800061c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800061e:	4b10      	ldr	r3, [pc, #64]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 8000620:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000624:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000626:	4b0e      	ldr	r3, [pc, #56]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 8000628:	2200      	movs	r2, #0
 800062a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800062c:	4b0c      	ldr	r3, [pc, #48]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 800062e:	2200      	movs	r2, #0
 8000630:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000632:	4b0b      	ldr	r3, [pc, #44]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 8000634:	2200      	movs	r2, #0
 8000636:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000638:	4b09      	ldr	r3, [pc, #36]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 800063a:	220c      	movs	r2, #12
 800063c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800063e:	4b08      	ldr	r3, [pc, #32]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 8000640:	2200      	movs	r2, #0
 8000642:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000644:	4b06      	ldr	r3, [pc, #24]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 8000646:	2200      	movs	r2, #0
 8000648:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800064a:	4805      	ldr	r0, [pc, #20]	@ (8000660 <MX_USART2_UART_Init+0x4c>)
 800064c:	f001 fdd2 	bl	80021f4 <HAL_UART_Init>
 8000650:	4603      	mov	r3, r0
 8000652:	2b00      	cmp	r3, #0
 8000654:	d001      	beq.n	800065a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000656:	f000 fbe5 	bl	8000e24 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800065a:	bf00      	nop
 800065c:	bd80      	pop	{r7, pc}
 800065e:	bf00      	nop
 8000660:	20000198 	.word	0x20000198
 8000664:	40004400 	.word	0x40004400

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b08a      	sub	sp, #40	@ 0x28
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	f107 0314 	add.w	r3, r7, #20
 8000672:	2200      	movs	r2, #0
 8000674:	601a      	str	r2, [r3, #0]
 8000676:	605a      	str	r2, [r3, #4]
 8000678:	609a      	str	r2, [r3, #8]
 800067a:	60da      	str	r2, [r3, #12]
 800067c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	613b      	str	r3, [r7, #16]
 8000682:	4b92      	ldr	r3, [pc, #584]	@ (80008cc <MX_GPIO_Init+0x264>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4a91      	ldr	r2, [pc, #580]	@ (80008cc <MX_GPIO_Init+0x264>)
 8000688:	f043 0304 	orr.w	r3, r3, #4
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4b8f      	ldr	r3, [pc, #572]	@ (80008cc <MX_GPIO_Init+0x264>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0304 	and.w	r3, r3, #4
 8000696:	613b      	str	r3, [r7, #16]
 8000698:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	60fb      	str	r3, [r7, #12]
 800069e:	4b8b      	ldr	r3, [pc, #556]	@ (80008cc <MX_GPIO_Init+0x264>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4a8a      	ldr	r2, [pc, #552]	@ (80008cc <MX_GPIO_Init+0x264>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4b88      	ldr	r3, [pc, #544]	@ (80008cc <MX_GPIO_Init+0x264>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006b2:	60fb      	str	r3, [r7, #12]
 80006b4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	4b84      	ldr	r3, [pc, #528]	@ (80008cc <MX_GPIO_Init+0x264>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a83      	ldr	r2, [pc, #524]	@ (80008cc <MX_GPIO_Init+0x264>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b81      	ldr	r3, [pc, #516]	@ (80008cc <MX_GPIO_Init+0x264>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	60bb      	str	r3, [r7, #8]
 80006d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	4b7d      	ldr	r3, [pc, #500]	@ (80008cc <MX_GPIO_Init+0x264>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a7c      	ldr	r2, [pc, #496]	@ (80008cc <MX_GPIO_Init+0x264>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b7a      	ldr	r3, [pc, #488]	@ (80008cc <MX_GPIO_Init+0x264>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	607b      	str	r3, [r7, #4]
 80006ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	4b76      	ldr	r3, [pc, #472]	@ (80008cc <MX_GPIO_Init+0x264>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a75      	ldr	r2, [pc, #468]	@ (80008cc <MX_GPIO_Init+0x264>)
 80006f8:	f043 0308 	orr.w	r3, r3, #8
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b73      	ldr	r3, [pc, #460]	@ (80008cc <MX_GPIO_Init+0x264>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0308 	and.w	r3, r3, #8
 8000706:	603b      	str	r3, [r7, #0]
 8000708:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, OUT_SPD_Pin|OUT_APPR_Pin|OUT_HDG_Pin|OUT_AP_ENG_Pin
 800070a:	2200      	movs	r2, #0
 800070c:	f243 410f 	movw	r1, #13327	@ 0x340f
 8000710:	486f      	ldr	r0, [pc, #444]	@ (80008d0 <MX_GPIO_Init+0x268>)
 8000712:	f001 f8a5 	bl	8001860 <HAL_GPIO_WritePin>
                          |OUT_TURB_Pin|OUT_FD1_FD2_Pin|OUT_ALT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OUT_XFR_GPIO_Port, OUT_XFR_Pin, GPIO_PIN_RESET);
 8000716:	2200      	movs	r2, #0
 8000718:	2102      	movs	r1, #2
 800071a:	486e      	ldr	r0, [pc, #440]	@ (80008d4 <MX_GPIO_Init+0x26c>)
 800071c:	f001 f8a0 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, OUT_VS_Pin|OUT_NAV_Pin, GPIO_PIN_RESET);
 8000720:	2200      	movs	r2, #0
 8000722:	f248 0110 	movw	r1, #32784	@ 0x8010
 8000726:	486c      	ldr	r0, [pc, #432]	@ (80008d8 <MX_GPIO_Init+0x270>)
 8000728:	f001 f89a 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_1_2_BANK_Pin|OUT_BC_Pin, GPIO_PIN_RESET);
 800072c:	2200      	movs	r2, #0
 800072e:	2181      	movs	r1, #129	@ 0x81
 8000730:	486a      	ldr	r0, [pc, #424]	@ (80008dc <MX_GPIO_Init+0x274>)
 8000732:	f001 f895 	bl	8001860 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OUT_SPD_Pin OUT_APPR_Pin OUT_HDG_Pin OUT_AP_ENG_Pin
                           OUT_TURB_Pin OUT_FD1_FD2_Pin OUT_ALT_Pin */
  GPIO_InitStruct.Pin = OUT_SPD_Pin|OUT_APPR_Pin|OUT_HDG_Pin|OUT_AP_ENG_Pin
 8000736:	f243 430f 	movw	r3, #13327	@ 0x340f
 800073a:	617b      	str	r3, [r7, #20]
                          |OUT_TURB_Pin|OUT_FD1_FD2_Pin|OUT_ALT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800073c:	2301      	movs	r3, #1
 800073e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000740:	2300      	movs	r3, #0
 8000742:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	2300      	movs	r3, #0
 8000746:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000748:	f107 0314 	add.w	r3, r7, #20
 800074c:	4619      	mov	r1, r3
 800074e:	4860      	ldr	r0, [pc, #384]	@ (80008d0 <MX_GPIO_Init+0x268>)
 8000750:	f000 feea 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pin : OUT_XFR_Pin */
  GPIO_InitStruct.Pin = OUT_XFR_Pin;
 8000754:	2302      	movs	r3, #2
 8000756:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000758:	2301      	movs	r3, #1
 800075a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000760:	2300      	movs	r3, #0
 8000762:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(OUT_XFR_GPIO_Port, &GPIO_InitStruct);
 8000764:	f107 0314 	add.w	r3, r7, #20
 8000768:	4619      	mov	r1, r3
 800076a:	485a      	ldr	r0, [pc, #360]	@ (80008d4 <MX_GPIO_Init+0x26c>)
 800076c:	f000 fedc 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pins : INP_ALT_Pin INP_FD1_FD2_Pin INP_AP_ENG_Pin INP_XFR_Pin
                           INP_SPD_Pin INP_VS_Pin INP_1_2_BANK_Pin ENC_SPD_EPB_Pin */
  GPIO_InitStruct.Pin = INP_ALT_Pin|INP_FD1_FD2_Pin|INP_AP_ENG_Pin|INP_XFR_Pin
 8000770:	f240 73e3 	movw	r3, #2019	@ 0x7e3
 8000774:	617b      	str	r3, [r7, #20]
                          |INP_SPD_Pin|INP_VS_Pin|INP_1_2_BANK_Pin|ENC_SPD_EPB_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000776:	2300      	movs	r3, #0
 8000778:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800077a:	2301      	movs	r3, #1
 800077c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800077e:	f107 0314 	add.w	r3, r7, #20
 8000782:	4619      	mov	r1, r3
 8000784:	4854      	ldr	r0, [pc, #336]	@ (80008d8 <MX_GPIO_Init+0x270>)
 8000786:	f000 fecf 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_VS_Pin OUT_NAV_Pin */
  GPIO_InitStruct.Pin = OUT_VS_Pin|OUT_NAV_Pin;
 800078a:	f248 0310 	movw	r3, #32784	@ 0x8010
 800078e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000790:	2301      	movs	r3, #1
 8000792:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000794:	2300      	movs	r3, #0
 8000796:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000798:	2300      	movs	r3, #0
 800079a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800079c:	f107 0314 	add.w	r3, r7, #20
 80007a0:	4619      	mov	r1, r3
 80007a2:	484d      	ldr	r0, [pc, #308]	@ (80008d8 <MX_GPIO_Init+0x270>)
 80007a4:	f000 fec0 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_CRS1_2_EPB_Pin INP_HDG_EPB_Pin INP_APRR_Pin INP_HDG_Pin */
  GPIO_InitStruct.Pin = ENC_CRS1_2_EPB_Pin|INP_HDG_EPB_Pin|INP_APRR_Pin|INP_HDG_Pin;
 80007a8:	f44f 6329 	mov.w	r3, #2704	@ 0xa90
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80007b2:	2301      	movs	r3, #1
 80007b4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007b6:	f107 0314 	add.w	r3, r7, #20
 80007ba:	4619      	mov	r1, r3
 80007bc:	4844      	ldr	r0, [pc, #272]	@ (80008d0 <MX_GPIO_Init+0x268>)
 80007be:	f000 feb3 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_1_2_BANK_Pin OUT_BC_Pin */
  GPIO_InitStruct.Pin = OUT_1_2_BANK_Pin|OUT_BC_Pin;
 80007c2:	2381      	movs	r3, #129	@ 0x81
 80007c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c6:	2301      	movs	r3, #1
 80007c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	2300      	movs	r3, #0
 80007cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ce:	2300      	movs	r3, #0
 80007d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007d2:	f107 0314 	add.w	r3, r7, #20
 80007d6:	4619      	mov	r1, r3
 80007d8:	4840      	ldr	r0, [pc, #256]	@ (80008dc <MX_GPIO_Init+0x274>)
 80007da:	f000 fea5 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_CRS2_B_Pin ENC_CRS2_A_Pin ENC_SPD_B_Pin ENC_VS_B_Pin
                           ENC_CRS1_B_Pin ENC_CRS1_A_Pin ENC_HDG_A_Pin ENC_SPD_A_Pin
                           ENC_HDG_B_Pin */
  GPIO_InitStruct.Pin = ENC_CRS2_B_Pin|ENC_CRS2_A_Pin|ENC_SPD_B_Pin|ENC_VS_B_Pin
 80007de:	f247 433e 	movw	r3, #29758	@ 0x743e
 80007e2:	617b      	str	r3, [r7, #20]
                          |ENC_CRS1_B_Pin|ENC_CRS1_A_Pin|ENC_HDG_A_Pin|ENC_SPD_A_Pin
                          |ENC_HDG_B_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007e4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80007e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ea:	2300      	movs	r3, #0
 80007ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ee:	f107 0314 	add.w	r3, r7, #20
 80007f2:	4619      	mov	r1, r3
 80007f4:	4839      	ldr	r0, [pc, #228]	@ (80008dc <MX_GPIO_Init+0x274>)
 80007f6:	f000 fe97 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_ALT_EPB_Pin INP_BC_Pin INP_TURB_Pin INP_AP_DISC_Pin */
  GPIO_InitStruct.Pin = ENC_ALT_EPB_Pin|INP_BC_Pin|INP_TURB_Pin|INP_AP_DISC_Pin;
 80007fa:	f248 3340 	movw	r3, #33600	@ 0x8340
 80007fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000800:	2300      	movs	r3, #0
 8000802:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000804:	2301      	movs	r3, #1
 8000806:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000808:	f107 0314 	add.w	r3, r7, #20
 800080c:	4619      	mov	r1, r3
 800080e:	4833      	ldr	r0, [pc, #204]	@ (80008dc <MX_GPIO_Init+0x274>)
 8000810:	f000 fe8a 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_ALT_B_Pin ENC_ALT_A_Pin */
  GPIO_InitStruct.Pin = ENC_ALT_B_Pin|ENC_ALT_A_Pin;
 8000814:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8000818:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800081a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800081e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000820:	2300      	movs	r3, #0
 8000822:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000824:	f107 0314 	add.w	r3, r7, #20
 8000828:	4619      	mov	r1, r3
 800082a:	4829      	ldr	r0, [pc, #164]	@ (80008d0 <MX_GPIO_Init+0x268>)
 800082c:	f000 fe7c 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENC_VS_A_Pin */
  GPIO_InitStruct.Pin = ENC_VS_A_Pin;
 8000830:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000834:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000836:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800083a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800083c:	2300      	movs	r3, #0
 800083e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(ENC_VS_A_GPIO_Port, &GPIO_InitStruct);
 8000840:	f107 0314 	add.w	r3, r7, #20
 8000844:	4619      	mov	r1, r3
 8000846:	4824      	ldr	r0, [pc, #144]	@ (80008d8 <MX_GPIO_Init+0x270>)
 8000848:	f000 fe6e 	bl	8001528 <HAL_GPIO_Init>

  /*Configure GPIO pin : INP_NAV_Pin */
  GPIO_InitStruct.Pin = INP_NAV_Pin;
 800084c:	2304      	movs	r3, #4
 800084e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000850:	2300      	movs	r3, #0
 8000852:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000854:	2301      	movs	r3, #1
 8000856:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(INP_NAV_GPIO_Port, &GPIO_InitStruct);
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4619      	mov	r1, r3
 800085e:	4820      	ldr	r0, [pc, #128]	@ (80008e0 <MX_GPIO_Init+0x278>)
 8000860:	f000 fe62 	bl	8001528 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000864:	2200      	movs	r2, #0
 8000866:	2100      	movs	r1, #0
 8000868:	2007      	movs	r0, #7
 800086a:	f000 fd94 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 800086e:	2007      	movs	r0, #7
 8000870:	f000 fdad 	bl	80013ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000874:	2200      	movs	r2, #0
 8000876:	2100      	movs	r1, #0
 8000878:	2008      	movs	r0, #8
 800087a:	f000 fd8c 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 800087e:	2008      	movs	r0, #8
 8000880:	f000 fda5 	bl	80013ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000884:	2200      	movs	r2, #0
 8000886:	2100      	movs	r1, #0
 8000888:	2009      	movs	r0, #9
 800088a:	f000 fd84 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 800088e:	2009      	movs	r0, #9
 8000890:	f000 fd9d 	bl	80013ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	200a      	movs	r0, #10
 800089a:	f000 fd7c 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 800089e:	200a      	movs	r0, #10
 80008a0:	f000 fd95 	bl	80013ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80008a4:	2200      	movs	r2, #0
 80008a6:	2100      	movs	r1, #0
 80008a8:	2017      	movs	r0, #23
 80008aa:	f000 fd74 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80008ae:	2017      	movs	r0, #23
 80008b0:	f000 fd8d 	bl	80013ce <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80008b4:	2200      	movs	r2, #0
 80008b6:	2100      	movs	r1, #0
 80008b8:	2028      	movs	r0, #40	@ 0x28
 80008ba:	f000 fd6c 	bl	8001396 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80008be:	2028      	movs	r0, #40	@ 0x28
 80008c0:	f000 fd85 	bl	80013ce <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008c4:	bf00      	nop
 80008c6:	3728      	adds	r7, #40	@ 0x28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	40023800 	.word	0x40023800
 80008d0:	40020800 	.word	0x40020800
 80008d4:	40021c00 	.word	0x40021c00
 80008d8:	40020000 	.word	0x40020000
 80008dc:	40020400 	.word	0x40020400
 80008e0:	40020c00 	.word	0x40020c00

080008e4 <HAL_GPIO_EXTI_Callback>:
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
  return ch;
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	80fb      	strh	r3, [r7, #6]
	uint32_t currentTime = HAL_GetTick(); // Obtiene el tiempo actual en ms
 80008ee:	f000 fc6b 	bl	80011c8 <HAL_GetTick>
 80008f2:	60b8      	str	r0, [r7, #8]

	for (int8_t encoder = 0; encoder < 5; encoder++) {
 80008f4:	2300      	movs	r3, #0
 80008f6:	73fb      	strb	r3, [r7, #15]
 80008f8:	e0e7      	b.n	8000aca <HAL_GPIO_EXTI_Callback+0x1e6>
		if (debounceStates[encoder].pin == GPIO_Pin) {
 80008fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008fe:	4a78      	ldr	r2, [pc, #480]	@ (8000ae0 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000900:	f832 3033 	ldrh.w	r3, [r2, r3, lsl #3]
 8000904:	88fa      	ldrh	r2, [r7, #6]
 8000906:	429a      	cmp	r2, r3
 8000908:	f040 80d9 	bne.w	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
			if (currentTime - debounceStates[encoder].lastInterruptTime > DEBOUNCE_DELAY) {
 800090c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000910:	4a73      	ldr	r2, [pc, #460]	@ (8000ae0 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000912:	00db      	lsls	r3, r3, #3
 8000914:	4413      	add	r3, r2
 8000916:	685b      	ldr	r3, [r3, #4]
 8000918:	68ba      	ldr	r2, [r7, #8]
 800091a:	1ad3      	subs	r3, r2, r3
 800091c:	2b19      	cmp	r3, #25
 800091e:	f240 80ce 	bls.w	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
				debounceStates[encoder].lastInterruptTime = currentTime;
 8000922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000926:	4a6e      	ldr	r2, [pc, #440]	@ (8000ae0 <HAL_GPIO_EXTI_Callback+0x1fc>)
 8000928:	00db      	lsls	r3, r3, #3
 800092a:	4413      	add	r3, r2
 800092c:	68ba      	ldr	r2, [r7, #8]
 800092e:	605a      	str	r2, [r3, #4]
				switch(GPIO_Pin){
 8000930:	88fb      	ldrh	r3, [r7, #6]
 8000932:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000936:	d01d      	beq.n	8000974 <HAL_GPIO_EXTI_Callback+0x90>
 8000938:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800093c:	f300 80bf 	bgt.w	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
 8000940:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8000944:	f000 8084 	beq.w	8000a50 <HAL_GPIO_EXTI_Callback+0x16c>
 8000948:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800094c:	f300 80b7 	bgt.w	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
 8000950:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000954:	d02a      	beq.n	80009ac <HAL_GPIO_EXTI_Callback+0xc8>
 8000956:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800095a:	f300 80b0 	bgt.w	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
 800095e:	2b40      	cmp	r3, #64	@ 0x40
 8000960:	d05a      	beq.n	8000a18 <HAL_GPIO_EXTI_Callback+0x134>
 8000962:	2b40      	cmp	r3, #64	@ 0x40
 8000964:	f300 80ab 	bgt.w	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
 8000968:	2b02      	cmp	r3, #2
 800096a:	f000 808d 	beq.w	8000a88 <HAL_GPIO_EXTI_Callback+0x1a4>
 800096e:	2b20      	cmp	r3, #32
 8000970:	d037      	beq.n	80009e2 <HAL_GPIO_EXTI_Callback+0xfe>
 8000972:	e0a4      	b.n	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
					case ENC_CRS1_B_Pin:
						if(HAL_GPIO_ReadPin(GPIOB, ENC_CRS1_A_Pin)){
 8000974:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000978:	485a      	ldr	r0, [pc, #360]	@ (8000ae4 <HAL_GPIO_EXTI_Callback+0x200>)
 800097a:	f000 ff59 	bl	8001830 <HAL_GPIO_ReadPin>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d009      	beq.n	8000998 <HAL_GPIO_EXTI_Callback+0xb4>
							encoderStorage[ENCODER_FLAG] = 1;
 8000984:	4b58      	ldr	r3, [pc, #352]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000986:	2201      	movs	r2, #1
 8000988:	701a      	strb	r2, [r3, #0]
							encoderStorage[ENCODER_INDEX] = 0;
 800098a:	4b57      	ldr	r3, [pc, #348]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 800098c:	2200      	movs	r2, #0
 800098e:	705a      	strb	r2, [r3, #1]
							encoderStorage[ENCODER_DATA] = 1;
 8000990:	4b55      	ldr	r3, [pc, #340]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000992:	2201      	movs	r2, #1
 8000994:	709a      	strb	r2, [r3, #2]
						}else{
							encoderStorage[ENCODER_FLAG] = 1;
							encoderStorage[ENCODER_INDEX] = 0;
							encoderStorage[ENCODER_DATA] = 0;
						}
						break;
 8000996:	e092      	b.n	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
							encoderStorage[ENCODER_FLAG] = 1;
 8000998:	4b53      	ldr	r3, [pc, #332]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 800099a:	2201      	movs	r2, #1
 800099c:	701a      	strb	r2, [r3, #0]
							encoderStorage[ENCODER_INDEX] = 0;
 800099e:	4b52      	ldr	r3, [pc, #328]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	705a      	strb	r2, [r3, #1]
							encoderStorage[ENCODER_DATA] = 0;
 80009a4:	4b50      	ldr	r3, [pc, #320]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	709a      	strb	r2, [r3, #2]
						break;
 80009aa:	e088      	b.n	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
					case ENC_SPD_B_Pin:
						if(HAL_GPIO_ReadPin(GPIOB, ENC_SPD_A_Pin)){
 80009ac:	2110      	movs	r1, #16
 80009ae:	484d      	ldr	r0, [pc, #308]	@ (8000ae4 <HAL_GPIO_EXTI_Callback+0x200>)
 80009b0:	f000 ff3e 	bl	8001830 <HAL_GPIO_ReadPin>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d009      	beq.n	80009ce <HAL_GPIO_EXTI_Callback+0xea>
							encoderStorage[ENCODER_FLAG] = 1;
 80009ba:	4b4b      	ldr	r3, [pc, #300]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 80009bc:	2201      	movs	r2, #1
 80009be:	701a      	strb	r2, [r3, #0]
							encoderStorage[ENCODER_INDEX] = 1;
 80009c0:	4b49      	ldr	r3, [pc, #292]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	705a      	strb	r2, [r3, #1]
							encoderStorage[ENCODER_DATA] = 1;
 80009c6:	4b48      	ldr	r3, [pc, #288]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 80009c8:	2201      	movs	r2, #1
 80009ca:	709a      	strb	r2, [r3, #2]
						}else{
							encoderStorage[ENCODER_FLAG] = 1;
							encoderStorage[ENCODER_INDEX] = 1;
							encoderStorage[ENCODER_DATA] = 0;
						}
						break;
 80009cc:	e077      	b.n	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
							encoderStorage[ENCODER_FLAG] = 1;
 80009ce:	4b46      	ldr	r3, [pc, #280]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 80009d0:	2201      	movs	r2, #1
 80009d2:	701a      	strb	r2, [r3, #0]
							encoderStorage[ENCODER_INDEX] = 1;
 80009d4:	4b44      	ldr	r3, [pc, #272]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 80009d6:	2201      	movs	r2, #1
 80009d8:	705a      	strb	r2, [r3, #1]
							encoderStorage[ENCODER_DATA] = 0;
 80009da:	4b43      	ldr	r3, [pc, #268]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 80009dc:	2200      	movs	r2, #0
 80009de:	709a      	strb	r2, [r3, #2]
						break;
 80009e0:	e06d      	b.n	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
					case ENC_HDG_B_Pin:
						if(HAL_GPIO_ReadPin(GPIOB, ENC_HDG_A_Pin)){
 80009e2:	2108      	movs	r1, #8
 80009e4:	483f      	ldr	r0, [pc, #252]	@ (8000ae4 <HAL_GPIO_EXTI_Callback+0x200>)
 80009e6:	f000 ff23 	bl	8001830 <HAL_GPIO_ReadPin>
 80009ea:	4603      	mov	r3, r0
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d009      	beq.n	8000a04 <HAL_GPIO_EXTI_Callback+0x120>
							encoderStorage[ENCODER_FLAG] = 1;
 80009f0:	4b3d      	ldr	r3, [pc, #244]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 80009f2:	2201      	movs	r2, #1
 80009f4:	701a      	strb	r2, [r3, #0]
							encoderStorage[ENCODER_INDEX] = 2;
 80009f6:	4b3c      	ldr	r3, [pc, #240]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 80009f8:	2202      	movs	r2, #2
 80009fa:	705a      	strb	r2, [r3, #1]
							encoderStorage[ENCODER_DATA] = 1;
 80009fc:	4b3a      	ldr	r3, [pc, #232]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	709a      	strb	r2, [r3, #2]
						}else{
							encoderStorage[ENCODER_FLAG] = 1;
							encoderStorage[ENCODER_INDEX] = 2;
							encoderStorage[ENCODER_DATA] = 0;
						}
						break;
 8000a02:	e05c      	b.n	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
							encoderStorage[ENCODER_FLAG] = 1;
 8000a04:	4b38      	ldr	r3, [pc, #224]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	701a      	strb	r2, [r3, #0]
							encoderStorage[ENCODER_INDEX] = 2;
 8000a0a:	4b37      	ldr	r3, [pc, #220]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	705a      	strb	r2, [r3, #1]
							encoderStorage[ENCODER_DATA] = 0;
 8000a10:	4b35      	ldr	r3, [pc, #212]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	709a      	strb	r2, [r3, #2]
						break;
 8000a16:	e052      	b.n	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
					case ENC_ALT_B_Pin:
						if(HAL_GPIO_ReadPin(GPIOC, ENC_ALT_A_Pin)){
 8000a18:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000a1c:	4833      	ldr	r0, [pc, #204]	@ (8000aec <HAL_GPIO_EXTI_Callback+0x208>)
 8000a1e:	f000 ff07 	bl	8001830 <HAL_GPIO_ReadPin>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d009      	beq.n	8000a3c <HAL_GPIO_EXTI_Callback+0x158>
							encoderStorage[ENCODER_FLAG] = 1;
 8000a28:	4b2f      	ldr	r3, [pc, #188]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]
							encoderStorage[ENCODER_INDEX] = 3;
 8000a2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a30:	2203      	movs	r2, #3
 8000a32:	705a      	strb	r2, [r3, #1]
							encoderStorage[ENCODER_DATA] = 1;
 8000a34:	4b2c      	ldr	r3, [pc, #176]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a36:	2201      	movs	r2, #1
 8000a38:	709a      	strb	r2, [r3, #2]
						}else{
							encoderStorage[ENCODER_FLAG] = 1;
							encoderStorage[ENCODER_INDEX] = 3;
							encoderStorage[ENCODER_DATA] = 0;
						}
						break;
 8000a3a:	e040      	b.n	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
							encoderStorage[ENCODER_FLAG] = 1;
 8000a3c:	4b2a      	ldr	r3, [pc, #168]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
							encoderStorage[ENCODER_INDEX] = 3;
 8000a42:	4b29      	ldr	r3, [pc, #164]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a44:	2203      	movs	r2, #3
 8000a46:	705a      	strb	r2, [r3, #1]
							encoderStorage[ENCODER_DATA] = 0;
 8000a48:	4b27      	ldr	r3, [pc, #156]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	709a      	strb	r2, [r3, #2]
						break;
 8000a4e:	e036      	b.n	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
					case ENC_VS_B_Pin:
						if(HAL_GPIO_ReadPin(GPIOA, ENC_VS_A_Pin)){
 8000a50:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000a54:	4826      	ldr	r0, [pc, #152]	@ (8000af0 <HAL_GPIO_EXTI_Callback+0x20c>)
 8000a56:	f000 feeb 	bl	8001830 <HAL_GPIO_ReadPin>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d009      	beq.n	8000a74 <HAL_GPIO_EXTI_Callback+0x190>
							encoderStorage[ENCODER_FLAG] = 1;
 8000a60:	4b21      	ldr	r3, [pc, #132]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a62:	2201      	movs	r2, #1
 8000a64:	701a      	strb	r2, [r3, #0]
							encoderStorage[ENCODER_INDEX] = 4;
 8000a66:	4b20      	ldr	r3, [pc, #128]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a68:	2204      	movs	r2, #4
 8000a6a:	705a      	strb	r2, [r3, #1]
							encoderStorage[ENCODER_DATA] = 0;
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	709a      	strb	r2, [r3, #2]
						}else{
							encoderStorage[ENCODER_FLAG] = 1;
							encoderStorage[ENCODER_INDEX] = 4;
							encoderStorage[ENCODER_DATA] = 1;
						}
						break;
 8000a72:	e024      	b.n	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
							encoderStorage[ENCODER_FLAG] = 1;
 8000a74:	4b1c      	ldr	r3, [pc, #112]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a76:	2201      	movs	r2, #1
 8000a78:	701a      	strb	r2, [r3, #0]
							encoderStorage[ENCODER_INDEX] = 4;
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a7c:	2204      	movs	r2, #4
 8000a7e:	705a      	strb	r2, [r3, #1]
							encoderStorage[ENCODER_DATA] = 1;
 8000a80:	4b19      	ldr	r3, [pc, #100]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	709a      	strb	r2, [r3, #2]
						break;
 8000a86:	e01a      	b.n	8000abe <HAL_GPIO_EXTI_Callback+0x1da>
					case ENC_CRS2_B_Pin:
						if(HAL_GPIO_ReadPin(GPIOB, ENC_CRS2_A_Pin)){
 8000a88:	2104      	movs	r1, #4
 8000a8a:	4816      	ldr	r0, [pc, #88]	@ (8000ae4 <HAL_GPIO_EXTI_Callback+0x200>)
 8000a8c:	f000 fed0 	bl	8001830 <HAL_GPIO_ReadPin>
 8000a90:	4603      	mov	r3, r0
 8000a92:	2b00      	cmp	r3, #0
 8000a94:	d009      	beq.n	8000aaa <HAL_GPIO_EXTI_Callback+0x1c6>
							encoderStorage[ENCODER_FLAG] = 1;
 8000a96:	4b14      	ldr	r3, [pc, #80]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a98:	2201      	movs	r2, #1
 8000a9a:	701a      	strb	r2, [r3, #0]
							encoderStorage[ENCODER_INDEX] = 5;
 8000a9c:	4b12      	ldr	r3, [pc, #72]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000a9e:	2205      	movs	r2, #5
 8000aa0:	705a      	strb	r2, [r3, #1]
							encoderStorage[ENCODER_DATA] = 1;
 8000aa2:	4b11      	ldr	r3, [pc, #68]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000aa4:	2201      	movs	r2, #1
 8000aa6:	709a      	strb	r2, [r3, #2]
						}else{
							encoderStorage[ENCODER_FLAG] = 1;
							encoderStorage[ENCODER_INDEX] = 5;
							encoderStorage[ENCODER_DATA] = 0;
						}
						break;
 8000aa8:	e008      	b.n	8000abc <HAL_GPIO_EXTI_Callback+0x1d8>
							encoderStorage[ENCODER_FLAG] = 1;
 8000aaa:	4b0f      	ldr	r3, [pc, #60]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000aac:	2201      	movs	r2, #1
 8000aae:	701a      	strb	r2, [r3, #0]
							encoderStorage[ENCODER_INDEX] = 5;
 8000ab0:	4b0d      	ldr	r3, [pc, #52]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000ab2:	2205      	movs	r2, #5
 8000ab4:	705a      	strb	r2, [r3, #1]
							encoderStorage[ENCODER_DATA] = 0;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <HAL_GPIO_EXTI_Callback+0x204>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	709a      	strb	r2, [r3, #2]
						break;
 8000abc:	bf00      	nop
	for (int8_t encoder = 0; encoder < 5; encoder++) {
 8000abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ac2:	b2db      	uxtb	r3, r3
 8000ac4:	3301      	adds	r3, #1
 8000ac6:	b2db      	uxtb	r3, r3
 8000ac8:	73fb      	strb	r3, [r7, #15]
 8000aca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ace:	2b04      	cmp	r3, #4
 8000ad0:	f77f af13 	ble.w	80008fa <HAL_GPIO_EXTI_Callback+0x16>
				}
			}
		}
	}
}
 8000ad4:	bf00      	nop
 8000ad6:	bf00      	nop
 8000ad8:	3710      	adds	r7, #16
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	200000e8 	.word	0x200000e8
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	200001e0 	.word	0x200001e0
 8000aec:	40020800 	.word	0x40020800
 8000af0:	40020000 	.word	0x40020000

08000af4 <putToQueue>:
// PARAMETERS    : LinkedListNodeDef* ptrHead - pointer to the head link list
//				   uint8_t index - index of the element
//				   uint8_t data - data from the element
//				   uint8_t element _ Type of element encoder or button
// RETURNS       : LinkedListNodeDef* - pointer to the head of the link list
LinkedListNodeDef* putToQueue( uint8_t index, uint8_t data, uint8_t element, LinkedListNodeDef* ptrHead) {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	603b      	str	r3, [r7, #0]
 8000afc:	4603      	mov	r3, r0
 8000afe:	71fb      	strb	r3, [r7, #7]
 8000b00:	460b      	mov	r3, r1
 8000b02:	71bb      	strb	r3, [r7, #6]
 8000b04:	4613      	mov	r3, r2
 8000b06:	717b      	strb	r3, [r7, #5]

	LinkedListNodeDef* newNode = NULL; //Used for pointing to new node
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]
	LinkedListNodeDef* currentNode = ptrHead; //Used for traversing
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	60fb      	str	r3, [r7, #12]

	newNode = (LinkedListNodeDef*)malloc(sizeof(LinkedListNodeDef)); //assigning memory address to the new node
 8000b10:	2008      	movs	r0, #8
 8000b12:	f002 fb19 	bl	8003148 <malloc>
 8000b16:	4603      	mov	r3, r0
 8000b18:	60bb      	str	r3, [r7, #8]

	if (newNode == NULL) { // address validation
 8000b1a:	68bb      	ldr	r3, [r7, #8]
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d101      	bne.n	8000b24 <putToQueue+0x30>
		return ptrHead;
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	e01b      	b.n	8000b5c <putToQueue+0x68>
	}

	newNode->ptrNextNode = NULL; //initializing structure elements
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	2200      	movs	r2, #0
 8000b28:	601a      	str	r2, [r3, #0]
	newNode->element = element;
 8000b2a:	68bb      	ldr	r3, [r7, #8]
 8000b2c:	797a      	ldrb	r2, [r7, #5]
 8000b2e:	719a      	strb	r2, [r3, #6]
	newNode->index = index;
 8000b30:	68bb      	ldr	r3, [r7, #8]
 8000b32:	79fa      	ldrb	r2, [r7, #7]
 8000b34:	711a      	strb	r2, [r3, #4]
	newNode->sendData = data;
 8000b36:	68bb      	ldr	r3, [r7, #8]
 8000b38:	79ba      	ldrb	r2, [r7, #6]
 8000b3a:	715a      	strb	r2, [r3, #5]

	if (ptrHead == NULL) { // if it is the first element
 8000b3c:	683b      	ldr	r3, [r7, #0]
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d104      	bne.n	8000b4c <putToQueue+0x58>
		return newNode;
 8000b42:	68bb      	ldr	r3, [r7, #8]
 8000b44:	e00a      	b.n	8000b5c <putToQueue+0x68>
	}

	while (currentNode->ptrNextNode != NULL) {
		currentNode = currentNode->ptrNextNode; // move to the last element
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	60fb      	str	r3, [r7, #12]
	while (currentNode->ptrNextNode != NULL) {
 8000b4c:	68fb      	ldr	r3, [r7, #12]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d1f8      	bne.n	8000b46 <putToQueue+0x52>
	}

	currentNode->ptrNextNode = newNode;
 8000b54:	68fb      	ldr	r3, [r7, #12]
 8000b56:	68ba      	ldr	r2, [r7, #8]
 8000b58:	601a      	str	r2, [r3, #0]


	return ptrHead;
 8000b5a:	683b      	ldr	r3, [r7, #0]

}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	3710      	adds	r7, #16
 8000b60:	46bd      	mov	sp, r7
 8000b62:	bd80      	pop	{r7, pc}

08000b64 <transformData>:
// DESCRIPTION   : This function combine all the information in one variable to be send it
// PARAMETERS    : uint8_t index - index of the element
//				   uint8_t data - data from the element
//				   uint8_t element _ Type of element encoder or button
// RETURNS       : uint8_t - Data to be send
uint8_t transformData( uint8_t index, uint8_t data, uint8_t element) {
 8000b64:	b480      	push	{r7}
 8000b66:	b085      	sub	sp, #20
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	71bb      	strb	r3, [r7, #6]
 8000b72:	4613      	mov	r3, r2
 8000b74:	717b      	strb	r3, [r7, #5]

	uint8_t dataTransformed = index << 3;
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	00db      	lsls	r3, r3, #3
 8000b7a:	73fb      	strb	r3, [r7, #15]
	dataTransformed |= (data << 2);
 8000b7c:	79bb      	ldrb	r3, [r7, #6]
 8000b7e:	009b      	lsls	r3, r3, #2
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	73fb      	strb	r3, [r7, #15]
	dataTransformed |= (element << 0);
 8000b8c:	7bfa      	ldrb	r2, [r7, #15]
 8000b8e:	797b      	ldrb	r3, [r7, #5]
 8000b90:	4313      	orrs	r3, r2
 8000b92:	73fb      	strb	r3, [r7, #15]
	return  dataTransformed;
 8000b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3714      	adds	r7, #20
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
	...

08000ba4 <sendFromQueue>:

// FUNCTION      : sendFromQueue()
// DESCRIPTION   : This function send one data by time periods
// PARAMETERS    : LinkedListNodeDef* ptrHead - pointer to the head link list
// RETURNS       : LinkedListNodeDef* - pointer to the head of the link list
LinkedListNodeDef* sendFromQueue(LinkedListNodeDef* ptrHead) {
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]

	LinkedListNodeDef* currentNode = ptrHead; //Used for traversing
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	613b      	str	r3, [r7, #16]
	LinkedListNodeDef* nextPtrHead = ptrHead; //to save the next node address
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	617b      	str	r3, [r7, #20]
	static uint32_t lastSendTime = 0;

	if(ptrHead == NULL){
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d101      	bne.n	8000bbe <sendFromQueue+0x1a>
		return NULL;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e027      	b.n	8000c0e <sendFromQueue+0x6a>
	}

	if((HAL_GetTick() - lastSendTime) > SEND_DELAY){
 8000bbe:	f000 fb03 	bl	80011c8 <HAL_GetTick>
 8000bc2:	4602      	mov	r2, r0
 8000bc4:	4b14      	ldr	r3, [pc, #80]	@ (8000c18 <sendFromQueue+0x74>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	1ad3      	subs	r3, r2, r3
 8000bca:	2b0a      	cmp	r3, #10
 8000bcc:	d91e      	bls.n	8000c0c <sendFromQueue+0x68>
		nextPtrHead = currentNode->ptrNextNode; // Saving the next memory address
 8000bce:	693b      	ldr	r3, [r7, #16]
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	617b      	str	r3, [r7, #20]
		uint8_t sendData = transformData(currentNode->index, currentNode->sendData, currentNode->element);
 8000bd4:	693b      	ldr	r3, [r7, #16]
 8000bd6:	7918      	ldrb	r0, [r3, #4]
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	7959      	ldrb	r1, [r3, #5]
 8000bdc:	693b      	ldr	r3, [r7, #16]
 8000bde:	799b      	ldrb	r3, [r3, #6]
 8000be0:	461a      	mov	r2, r3
 8000be2:	f7ff ffbf 	bl	8000b64 <transformData>
 8000be6:	4603      	mov	r3, r0
 8000be8:	73fb      	strb	r3, [r7, #15]
		HAL_UART_Transmit_IT(&huart2, &sendData, TX_BUFFER_SIZE);
 8000bea:	f107 030f 	add.w	r3, r7, #15
 8000bee:	2201      	movs	r2, #1
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	480a      	ldr	r0, [pc, #40]	@ (8000c1c <sendFromQueue+0x78>)
 8000bf4:	f001 fb4e 	bl	8002294 <HAL_UART_Transmit_IT>
		free(currentNode); //Free memory space
 8000bf8:	6938      	ldr	r0, [r7, #16]
 8000bfa:	f002 faad 	bl	8003158 <free>
		currentNode = NULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	613b      	str	r3, [r7, #16]
		lastSendTime = HAL_GetTick();
 8000c02:	f000 fae1 	bl	80011c8 <HAL_GetTick>
 8000c06:	4603      	mov	r3, r0
 8000c08:	4a03      	ldr	r2, [pc, #12]	@ (8000c18 <sendFromQueue+0x74>)
 8000c0a:	6013      	str	r3, [r2, #0]
	}

	return nextPtrHead;
 8000c0c:	697b      	ldr	r3, [r7, #20]
}
 8000c0e:	4618      	mov	r0, r3
 8000c10:	3718      	adds	r7, #24
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	200001e8 	.word	0x200001e8
 8000c1c:	20000198 	.word	0x20000198

08000c20 <HAL_UART_RxCpltCallback>:
// DESCRIPTION   : it is the interruption used when the microcontroller recive
//					information from the serial port
// PARAMETERS    :
//					UART_HandleTypeDef *huart - it is the UART instance used
// RETURNS       : nothing
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	681b      	ldr	r3, [r3, #0]
 8000c2c:	4a05      	ldr	r2, [pc, #20]	@ (8000c44 <HAL_UART_RxCpltCallback+0x24>)
 8000c2e:	4293      	cmp	r3, r2
 8000c30:	d102      	bne.n	8000c38 <HAL_UART_RxCpltCallback+0x18>
        received = 1;
 8000c32:	4b05      	ldr	r3, [pc, #20]	@ (8000c48 <HAL_UART_RxCpltCallback+0x28>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]
    }
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	40004400 	.word	0x40004400
 8000c48:	20000118 	.word	0x20000118

08000c4c <updateLEDOutput>:
// FUNCTION      : updateLEDOutput()
// DESCRIPTION   : This function unpack the information form the simulator
//				   and update the LEDs
// PARAMETERS    : nothing
// RETURNS       : nothing
void updateLEDOutput(){
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b082      	sub	sp, #8
 8000c50:	af00      	add	r7, sp, #0

	static int16_t previousLedStatus = 0b111111111111;
	int16_t currentLedStatus = ledStatusRxBuffer;
 8000c52:	4b21      	ldr	r3, [pc, #132]	@ (8000cd8 <updateLEDOutput+0x8c>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	80bb      	strh	r3, [r7, #4]
	int16_t changedBits = previousLedStatus ^ currentLedStatus;
 8000c58:	4b20      	ldr	r3, [pc, #128]	@ (8000cdc <updateLEDOutput+0x90>)
 8000c5a:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c5e:	88bb      	ldrh	r3, [r7, #4]
 8000c60:	4053      	eors	r3, r2
 8000c62:	807b      	strh	r3, [r7, #2]
	int16_t pinState = 0;
 8000c64:	2300      	movs	r3, #0
 8000c66:	803b      	strh	r3, [r7, #0]

	for (int8_t i = 0; i < OUTPUT_DATA_SIZE; i++) {
 8000c68:	2300      	movs	r3, #0
 8000c6a:	71fb      	strb	r3, [r7, #7]
 8000c6c:	e029      	b.n	8000cc2 <updateLEDOutput+0x76>
		if (changedBits & (1 << i)) {
 8000c6e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000c72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c76:	fa42 f303 	asr.w	r3, r2, r3
 8000c7a:	f003 0301 	and.w	r3, r3, #1
 8000c7e:	2b00      	cmp	r3, #0
 8000c80:	d019      	beq.n	8000cb6 <updateLEDOutput+0x6a>
			pinState = (currentLedStatus >> i) & 1;
 8000c82:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000c86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8a:	fa42 f303 	asr.w	r3, r2, r3
 8000c8e:	b21b      	sxth	r3, r3
 8000c90:	f003 0301 	and.w	r3, r3, #1
 8000c94:	803b      	strh	r3, [r7, #0]
			HAL_GPIO_WritePin(leds[i].port, leds[i].pin, pinState);
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	4a11      	ldr	r2, [pc, #68]	@ (8000ce0 <updateLEDOutput+0x94>)
 8000c9c:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000ca0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca4:	4a0e      	ldr	r2, [pc, #56]	@ (8000ce0 <updateLEDOutput+0x94>)
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	4413      	add	r3, r2
 8000caa:	889b      	ldrh	r3, [r3, #4]
 8000cac:	883a      	ldrh	r2, [r7, #0]
 8000cae:	b2d2      	uxtb	r2, r2
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	f000 fdd5 	bl	8001860 <HAL_GPIO_WritePin>
	for (int8_t i = 0; i < OUTPUT_DATA_SIZE; i++) {
 8000cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	b2db      	uxtb	r3, r3
 8000cc0:	71fb      	strb	r3, [r7, #7]
 8000cc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cc6:	2b0b      	cmp	r3, #11
 8000cc8:	ddd1      	ble.n	8000c6e <updateLEDOutput+0x22>
		}
	}
	 previousLedStatus = currentLedStatus;
 8000cca:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <updateLEDOutput+0x90>)
 8000ccc:	88bb      	ldrh	r3, [r7, #4]
 8000cce:	8013      	strh	r3, [r2, #0]
}
 8000cd0:	bf00      	nop
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	2000011a 	.word	0x2000011a
 8000cdc:	2000011c 	.word	0x2000011c
 8000ce0:	20000000 	.word	0x20000000

08000ce4 <updateLeds>:

// FUNCTION      : updateLeds()
// DESCRIPTION   : This function updates LED Outputs
// PARAMETERS    : nothing
// RETURNS       : nothing
void updateLeds(){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
    if (received) {
 8000ce8:	4b08      	ldr	r3, [pc, #32]	@ (8000d0c <updateLeds+0x28>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b2db      	uxtb	r3, r3
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d009      	beq.n	8000d06 <updateLeds+0x22>
        received = 0;
 8000cf2:	4b06      	ldr	r3, [pc, #24]	@ (8000d0c <updateLeds+0x28>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	701a      	strb	r2, [r3, #0]
        updateLEDOutput();
 8000cf8:	f7ff ffa8 	bl	8000c4c <updateLEDOutput>
        HAL_UART_Receive_IT(&huart2, (uint8_t*)&ledStatusRxBuffer, 2); // Restart UART reception AFTER processing data
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	4904      	ldr	r1, [pc, #16]	@ (8000d10 <updateLeds+0x2c>)
 8000d00:	4804      	ldr	r0, [pc, #16]	@ (8000d14 <updateLeds+0x30>)
 8000d02:	f001 fafd 	bl	8002300 <HAL_UART_Receive_IT>
    }
}
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	20000118 	.word	0x20000118
 8000d10:	2000011a 	.word	0x2000011a
 8000d14:	20000198 	.word	0x20000198

08000d18 <turnOffLED>:

// FUNCTION      : updateLeds()
// DESCRIPTION   : This function Turn Off al LEDS
// PARAMETERS    : nothing
// RETURNS       : nothing
void turnOffLED(){
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0


	for (int8_t i = 0; i < OUTPUT_DATA_SIZE; i++) {
 8000d1e:	2300      	movs	r3, #0
 8000d20:	71fb      	strb	r3, [r7, #7]
 8000d22:	e014      	b.n	8000d4e <turnOffLED+0x36>
	        HAL_GPIO_WritePin(leds[i].port, leds[i].pin, 1);
 8000d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d28:	4a0d      	ldr	r2, [pc, #52]	@ (8000d60 <turnOffLED+0x48>)
 8000d2a:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	4a0b      	ldr	r2, [pc, #44]	@ (8000d60 <turnOffLED+0x48>)
 8000d34:	00db      	lsls	r3, r3, #3
 8000d36:	4413      	add	r3, r2
 8000d38:	889b      	ldrh	r3, [r3, #4]
 8000d3a:	2201      	movs	r2, #1
 8000d3c:	4619      	mov	r1, r3
 8000d3e:	f000 fd8f 	bl	8001860 <HAL_GPIO_WritePin>
	for (int8_t i = 0; i < OUTPUT_DATA_SIZE; i++) {
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	b2db      	uxtb	r3, r3
 8000d48:	3301      	adds	r3, #1
 8000d4a:	b2db      	uxtb	r3, r3
 8000d4c:	71fb      	strb	r3, [r7, #7]
 8000d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d52:	2b0b      	cmp	r3, #11
 8000d54:	dde6      	ble.n	8000d24 <turnOffLED+0xc>
	    }
}
 8000d56:	bf00      	nop
 8000d58:	bf00      	nop
 8000d5a:	3708      	adds	r7, #8
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	20000000 	.word	0x20000000

08000d64 <readDatabuttons>:
// FUNCTION      : readDatabuttons()
// DESCRIPTION   : This functions read the data in the buttons
//					and save in a QUEUE only if it is pressed
// PARAMETERS    : LinkedListNodeDef* ptrHead - pointer to the head link list
// RETURNS       : LinkedListNodeDef* - pointer to the head of the link list
LinkedListNodeDef* readDatabuttons(LinkedListNodeDef* ptrHead){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b086      	sub	sp, #24
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]

	static uint32_t lastTime[BUTTON_DATA_SIZE] = {0};
	LinkedListNodeDef* nodePtr = ptrHead;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	617b      	str	r3, [r7, #20]

	for(int8_t index = 0; index < BUTTON_DATA_SIZE; index++){
 8000d70:	2300      	movs	r3, #0
 8000d72:	74fb      	strb	r3, [r7, #19]
 8000d74:	e048      	b.n	8000e08 <readDatabuttons+0xa4>

		int8_t currentState  = HAL_GPIO_ReadPin(buttons[index].port, buttons[index].pin);
 8000d76:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000d7a:	4a28      	ldr	r2, [pc, #160]	@ (8000e1c <readDatabuttons+0xb8>)
 8000d7c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
 8000d80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000d84:	4925      	ldr	r1, [pc, #148]	@ (8000e1c <readDatabuttons+0xb8>)
 8000d86:	00db      	lsls	r3, r3, #3
 8000d88:	440b      	add	r3, r1
 8000d8a:	889b      	ldrh	r3, [r3, #4]
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4610      	mov	r0, r2
 8000d90:	f000 fd4e 	bl	8001830 <HAL_GPIO_ReadPin>
 8000d94:	4603      	mov	r3, r0
 8000d96:	74bb      	strb	r3, [r7, #18]

		if(buttons[index].state != currentState){
 8000d98:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000d9c:	4a1f      	ldr	r2, [pc, #124]	@ (8000e1c <readDatabuttons+0xb8>)
 8000d9e:	00db      	lsls	r3, r3, #3
 8000da0:	4413      	add	r3, r2
 8000da2:	799b      	ldrb	r3, [r3, #6]
 8000da4:	461a      	mov	r2, r3
 8000da6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	d026      	beq.n	8000dfc <readDatabuttons+0x98>

			uint32_t currentTime = HAL_GetTick();
 8000dae:	f000 fa0b 	bl	80011c8 <HAL_GetTick>
 8000db2:	60f8      	str	r0, [r7, #12]

			if((currentTime - lastTime[index]) > DEBOUNCE_DELAY){
 8000db4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000db8:	4a19      	ldr	r2, [pc, #100]	@ (8000e20 <readDatabuttons+0xbc>)
 8000dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dbe:	68fa      	ldr	r2, [r7, #12]
 8000dc0:	1ad3      	subs	r3, r2, r3
 8000dc2:	2b19      	cmp	r3, #25
 8000dc4:	d91a      	bls.n	8000dfc <readDatabuttons+0x98>
				if(currentState == 0 ){
 8000dc6:	f997 3012 	ldrsb.w	r3, [r7, #18]
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d106      	bne.n	8000ddc <readDatabuttons+0x78>
					nodePtr = putToQueue(index, 1, 0, ptrHead);
 8000dce:	7cf8      	ldrb	r0, [r7, #19]
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	2101      	movs	r1, #1
 8000dd6:	f7ff fe8d 	bl	8000af4 <putToQueue>
 8000dda:	6178      	str	r0, [r7, #20]
				}
				buttons[index].state = currentState;
 8000ddc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000de0:	7cb9      	ldrb	r1, [r7, #18]
 8000de2:	4a0e      	ldr	r2, [pc, #56]	@ (8000e1c <readDatabuttons+0xb8>)
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	4413      	add	r3, r2
 8000de8:	460a      	mov	r2, r1
 8000dea:	719a      	strb	r2, [r3, #6]
				lastTime[index] = currentTime;
 8000dec:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000df0:	490b      	ldr	r1, [pc, #44]	@ (8000e20 <readDatabuttons+0xbc>)
 8000df2:	68fa      	ldr	r2, [r7, #12]
 8000df4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				return nodePtr;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	e00a      	b.n	8000e12 <readDatabuttons+0xae>
	for(int8_t index = 0; index < BUTTON_DATA_SIZE; index++){
 8000dfc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	3301      	adds	r3, #1
 8000e04:	b2db      	uxtb	r3, r3
 8000e06:	74fb      	strb	r3, [r7, #19]
 8000e08:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8000e0c:	2b10      	cmp	r3, #16
 8000e0e:	ddb2      	ble.n	8000d76 <readDatabuttons+0x12>
			}
		}
	}
	return nodePtr;
 8000e10:	697b      	ldr	r3, [r7, #20]
}
 8000e12:	4618      	mov	r0, r3
 8000e14:	3718      	adds	r7, #24
 8000e16:	46bd      	mov	sp, r7
 8000e18:	bd80      	pop	{r7, pc}
 8000e1a:	bf00      	nop
 8000e1c:	20000060 	.word	0x20000060
 8000e20:	200001ec 	.word	0x200001ec

08000e24 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e28:	b672      	cpsid	i
}
 8000e2a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e2c:	bf00      	nop
 8000e2e:	e7fd      	b.n	8000e2c <Error_Handler+0x8>

08000e30 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	4b10      	ldr	r3, [pc, #64]	@ (8000e7c <HAL_MspInit+0x4c>)
 8000e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e3e:	4a0f      	ldr	r2, [pc, #60]	@ (8000e7c <HAL_MspInit+0x4c>)
 8000e40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000e44:	6453      	str	r3, [r2, #68]	@ 0x44
 8000e46:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <HAL_MspInit+0x4c>)
 8000e48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000e4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e52:	2300      	movs	r3, #0
 8000e54:	603b      	str	r3, [r7, #0]
 8000e56:	4b09      	ldr	r3, [pc, #36]	@ (8000e7c <HAL_MspInit+0x4c>)
 8000e58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e5a:	4a08      	ldr	r2, [pc, #32]	@ (8000e7c <HAL_MspInit+0x4c>)
 8000e5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000e60:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e62:	4b06      	ldr	r3, [pc, #24]	@ (8000e7c <HAL_MspInit+0x4c>)
 8000e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000e6a:	603b      	str	r3, [r7, #0]
 8000e6c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000e6e:	2007      	movs	r0, #7
 8000e70:	f000 fa86 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	40023800 	.word	0x40023800

08000e80 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b08a      	sub	sp, #40	@ 0x28
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e88:	f107 0314 	add.w	r3, r7, #20
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	4a1d      	ldr	r2, [pc, #116]	@ (8000f14 <HAL_UART_MspInit+0x94>)
 8000e9e:	4293      	cmp	r3, r2
 8000ea0:	d133      	bne.n	8000f0a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f18 <HAL_UART_MspInit+0x98>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eaa:	4a1b      	ldr	r2, [pc, #108]	@ (8000f18 <HAL_UART_MspInit+0x98>)
 8000eac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000eb2:	4b19      	ldr	r3, [pc, #100]	@ (8000f18 <HAL_UART_MspInit+0x98>)
 8000eb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	60fb      	str	r3, [r7, #12]
 8000ec2:	4b15      	ldr	r3, [pc, #84]	@ (8000f18 <HAL_UART_MspInit+0x98>)
 8000ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ec6:	4a14      	ldr	r2, [pc, #80]	@ (8000f18 <HAL_UART_MspInit+0x98>)
 8000ec8:	f043 0301 	orr.w	r3, r3, #1
 8000ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ece:	4b12      	ldr	r3, [pc, #72]	@ (8000f18 <HAL_UART_MspInit+0x98>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ed2:	f003 0301 	and.w	r3, r3, #1
 8000ed6:	60fb      	str	r3, [r7, #12]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000eda:	230c      	movs	r3, #12
 8000edc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ede:	2302      	movs	r3, #2
 8000ee0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000eea:	2307      	movs	r3, #7
 8000eec:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000eee:	f107 0314 	add.w	r3, r7, #20
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	4809      	ldr	r0, [pc, #36]	@ (8000f1c <HAL_UART_MspInit+0x9c>)
 8000ef6:	f000 fb17 	bl	8001528 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000efa:	2200      	movs	r2, #0
 8000efc:	2100      	movs	r1, #0
 8000efe:	2026      	movs	r0, #38	@ 0x26
 8000f00:	f000 fa49 	bl	8001396 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000f04:	2026      	movs	r0, #38	@ 0x26
 8000f06:	f000 fa62 	bl	80013ce <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8000f0a:	bf00      	nop
 8000f0c:	3728      	adds	r7, #40	@ 0x28
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	bd80      	pop	{r7, pc}
 8000f12:	bf00      	nop
 8000f14:	40004400 	.word	0x40004400
 8000f18:	40023800 	.word	0x40023800
 8000f1c:	40020000 	.word	0x40020000

08000f20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f24:	bf00      	nop
 8000f26:	e7fd      	b.n	8000f24 <NMI_Handler+0x4>

08000f28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f2c:	bf00      	nop
 8000f2e:	e7fd      	b.n	8000f2c <HardFault_Handler+0x4>

08000f30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f34:	bf00      	nop
 8000f36:	e7fd      	b.n	8000f34 <MemManage_Handler+0x4>

08000f38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f3c:	bf00      	nop
 8000f3e:	e7fd      	b.n	8000f3c <BusFault_Handler+0x4>

08000f40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f40:	b480      	push	{r7}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f44:	bf00      	nop
 8000f46:	e7fd      	b.n	8000f44 <UsageFault_Handler+0x4>

08000f48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f4c:	bf00      	nop
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr

08000f56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f56:	b480      	push	{r7}
 8000f58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f5a:	bf00      	nop
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr

08000f64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f68:	bf00      	nop
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f70:	4770      	bx	lr

08000f72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f76:	f000 f913 	bl	80011a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_CRS2_B_Pin);
 8000f82:	2002      	movs	r0, #2
 8000f84:	f000 fc86 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000f88:	bf00      	nop
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_CRS2_A_Pin);
 8000f90:	2004      	movs	r0, #4
 8000f92:	f000 fc7f 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000f96:	bf00      	nop
 8000f98:	bd80      	pop	{r7, pc}

08000f9a <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000f9a:	b580      	push	{r7, lr}
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_HDG_A_Pin);
 8000f9e:	2008      	movs	r0, #8
 8000fa0:	f000 fc78 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000fa4:	bf00      	nop
 8000fa6:	bd80      	pop	{r7, pc}

08000fa8 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_SPD_A_Pin);
 8000fac:	2010      	movs	r0, #16
 8000fae:	f000 fc71 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000fb2:	bf00      	nop
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8000fb6:	b580      	push	{r7, lr}
 8000fb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_HDG_B_Pin);
 8000fba:	2020      	movs	r0, #32
 8000fbc:	f000 fc6a 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_ALT_B_Pin);
 8000fc0:	2040      	movs	r0, #64	@ 0x40
 8000fc2:	f000 fc67 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_ALT_A_Pin);
 8000fc6:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000fca:	f000 fc63 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8000fce:	bf00      	nop
 8000fd0:	bd80      	pop	{r7, pc}
	...

08000fd4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000fd8:	4802      	ldr	r0, [pc, #8]	@ (8000fe4 <USART2_IRQHandler+0x10>)
 8000fda:	f001 f9b7 	bl	800234c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000fde:	bf00      	nop
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	20000198 	.word	0x20000198

08000fe8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_SPD_B_Pin);
 8000fec:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8000ff0:	f000 fc50 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_VS_A_Pin);
 8000ff4:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 8000ff8:	f000 fc4c 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_VS_B_Pin);
 8000ffc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 8001000:	f000 fc48 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_CRS1_B_Pin);
 8001004:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001008:	f000 fc44 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ENC_CRS1_A_Pin);
 800100c:	f44f 4080 	mov.w	r0, #16384	@ 0x4000
 8001010:	f000 fc40 	bl	8001894 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001014:	bf00      	nop
 8001016:	bd80      	pop	{r7, pc}

08001018 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b086      	sub	sp, #24
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001020:	4a14      	ldr	r2, [pc, #80]	@ (8001074 <_sbrk+0x5c>)
 8001022:	4b15      	ldr	r3, [pc, #84]	@ (8001078 <_sbrk+0x60>)
 8001024:	1ad3      	subs	r3, r2, r3
 8001026:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001028:	697b      	ldr	r3, [r7, #20]
 800102a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800102c:	4b13      	ldr	r3, [pc, #76]	@ (800107c <_sbrk+0x64>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d102      	bne.n	800103a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001034:	4b11      	ldr	r3, [pc, #68]	@ (800107c <_sbrk+0x64>)
 8001036:	4a12      	ldr	r2, [pc, #72]	@ (8001080 <_sbrk+0x68>)
 8001038:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103a:	4b10      	ldr	r3, [pc, #64]	@ (800107c <_sbrk+0x64>)
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	4413      	add	r3, r2
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	429a      	cmp	r2, r3
 8001046:	d207      	bcs.n	8001058 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001048:	f002 f954 	bl	80032f4 <__errno>
 800104c:	4603      	mov	r3, r0
 800104e:	220c      	movs	r2, #12
 8001050:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001052:	f04f 33ff 	mov.w	r3, #4294967295
 8001056:	e009      	b.n	800106c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001058:	4b08      	ldr	r3, [pc, #32]	@ (800107c <_sbrk+0x64>)
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800105e:	4b07      	ldr	r3, [pc, #28]	@ (800107c <_sbrk+0x64>)
 8001060:	681a      	ldr	r2, [r3, #0]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	4413      	add	r3, r2
 8001066:	4a05      	ldr	r2, [pc, #20]	@ (800107c <_sbrk+0x64>)
 8001068:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106a:	68fb      	ldr	r3, [r7, #12]
}
 800106c:	4618      	mov	r0, r3
 800106e:	3718      	adds	r7, #24
 8001070:	46bd      	mov	sp, r7
 8001072:	bd80      	pop	{r7, pc}
 8001074:	20020000 	.word	0x20020000
 8001078:	00000400 	.word	0x00000400
 800107c:	20000230 	.word	0x20000230
 8001080:	20000380 	.word	0x20000380

08001084 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001088:	4b06      	ldr	r3, [pc, #24]	@ (80010a4 <SystemInit+0x20>)
 800108a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800108e:	4a05      	ldr	r2, [pc, #20]	@ (80010a4 <SystemInit+0x20>)
 8001090:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001094:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001098:	bf00      	nop
 800109a:	46bd      	mov	sp, r7
 800109c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a0:	4770      	bx	lr
 80010a2:	bf00      	nop
 80010a4:	e000ed00 	.word	0xe000ed00

080010a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80010a8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80010e0 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80010ac:	f7ff ffea 	bl	8001084 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80010b0:	480c      	ldr	r0, [pc, #48]	@ (80010e4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80010b2:	490d      	ldr	r1, [pc, #52]	@ (80010e8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80010b4:	4a0d      	ldr	r2, [pc, #52]	@ (80010ec <LoopFillZerobss+0x1a>)
  movs r3, #0
 80010b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010b8:	e002      	b.n	80010c0 <LoopCopyDataInit>

080010ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010be:	3304      	adds	r3, #4

080010c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010c4:	d3f9      	bcc.n	80010ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010c6:	4a0a      	ldr	r2, [pc, #40]	@ (80010f0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80010c8:	4c0a      	ldr	r4, [pc, #40]	@ (80010f4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80010ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010cc:	e001      	b.n	80010d2 <LoopFillZerobss>

080010ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010d0:	3204      	adds	r2, #4

080010d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010d4:	d3fb      	bcc.n	80010ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010d6:	f002 f913 	bl	8003300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80010da:	f7ff f9f5 	bl	80004c8 <main>
  bx  lr    
 80010de:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80010e0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80010e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010e8:	2000017c 	.word	0x2000017c
  ldr r2, =_sidata
 80010ec:	08003420 	.word	0x08003420
  ldr r2, =_sbss
 80010f0:	2000017c 	.word	0x2000017c
  ldr r4, =_ebss
 80010f4:	20000380 	.word	0x20000380

080010f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80010f8:	e7fe      	b.n	80010f8 <ADC_IRQHandler>
	...

080010fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001100:	4b0e      	ldr	r3, [pc, #56]	@ (800113c <HAL_Init+0x40>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a0d      	ldr	r2, [pc, #52]	@ (800113c <HAL_Init+0x40>)
 8001106:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800110a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800110c:	4b0b      	ldr	r3, [pc, #44]	@ (800113c <HAL_Init+0x40>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a0a      	ldr	r2, [pc, #40]	@ (800113c <HAL_Init+0x40>)
 8001112:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001116:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001118:	4b08      	ldr	r3, [pc, #32]	@ (800113c <HAL_Init+0x40>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4a07      	ldr	r2, [pc, #28]	@ (800113c <HAL_Init+0x40>)
 800111e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001122:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001124:	2003      	movs	r0, #3
 8001126:	f000 f92b 	bl	8001380 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800112a:	2000      	movs	r0, #0
 800112c:	f000 f808 	bl	8001140 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001130:	f7ff fe7e 	bl	8000e30 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001134:	2300      	movs	r3, #0
}
 8001136:	4618      	mov	r0, r3
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40023c00 	.word	0x40023c00

08001140 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af00      	add	r7, sp, #0
 8001146:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001148:	4b12      	ldr	r3, [pc, #72]	@ (8001194 <HAL_InitTick+0x54>)
 800114a:	681a      	ldr	r2, [r3, #0]
 800114c:	4b12      	ldr	r3, [pc, #72]	@ (8001198 <HAL_InitTick+0x58>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	4619      	mov	r1, r3
 8001152:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001156:	fbb3 f3f1 	udiv	r3, r3, r1
 800115a:	fbb2 f3f3 	udiv	r3, r2, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f000 f943 	bl	80013ea <HAL_SYSTICK_Config>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e00e      	b.n	800118c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	2b0f      	cmp	r3, #15
 8001172:	d80a      	bhi.n	800118a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001174:	2200      	movs	r2, #0
 8001176:	6879      	ldr	r1, [r7, #4]
 8001178:	f04f 30ff 	mov.w	r0, #4294967295
 800117c:	f000 f90b 	bl	8001396 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001180:	4a06      	ldr	r2, [pc, #24]	@ (800119c <HAL_InitTick+0x5c>)
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001186:	2300      	movs	r3, #0
 8001188:	e000      	b.n	800118c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
}
 800118c:	4618      	mov	r0, r3
 800118e:	3708      	adds	r7, #8
 8001190:	46bd      	mov	sp, r7
 8001192:	bd80      	pop	{r7, pc}
 8001194:	20000120 	.word	0x20000120
 8001198:	20000128 	.word	0x20000128
 800119c:	20000124 	.word	0x20000124

080011a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80011a4:	4b06      	ldr	r3, [pc, #24]	@ (80011c0 <HAL_IncTick+0x20>)
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	461a      	mov	r2, r3
 80011aa:	4b06      	ldr	r3, [pc, #24]	@ (80011c4 <HAL_IncTick+0x24>)
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	4413      	add	r3, r2
 80011b0:	4a04      	ldr	r2, [pc, #16]	@ (80011c4 <HAL_IncTick+0x24>)
 80011b2:	6013      	str	r3, [r2, #0]
}
 80011b4:	bf00      	nop
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	20000128 	.word	0x20000128
 80011c4:	20000234 	.word	0x20000234

080011c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  return uwTick;
 80011cc:	4b03      	ldr	r3, [pc, #12]	@ (80011dc <HAL_GetTick+0x14>)
 80011ce:	681b      	ldr	r3, [r3, #0]
}
 80011d0:	4618      	mov	r0, r3
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop
 80011dc:	20000234 	.word	0x20000234

080011e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011e0:	b480      	push	{r7}
 80011e2:	b085      	sub	sp, #20
 80011e4:	af00      	add	r7, sp, #0
 80011e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f003 0307 	and.w	r3, r3, #7
 80011ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 80011f2:	68db      	ldr	r3, [r3, #12]
 80011f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011f6:	68ba      	ldr	r2, [r7, #8]
 80011f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80011fc:	4013      	ands	r3, r2
 80011fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001200:	68fb      	ldr	r3, [r7, #12]
 8001202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001204:	68bb      	ldr	r3, [r7, #8]
 8001206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800120c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001212:	4a04      	ldr	r2, [pc, #16]	@ (8001224 <__NVIC_SetPriorityGrouping+0x44>)
 8001214:	68bb      	ldr	r3, [r7, #8]
 8001216:	60d3      	str	r3, [r2, #12]
}
 8001218:	bf00      	nop
 800121a:	3714      	adds	r7, #20
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	e000ed00 	.word	0xe000ed00

08001228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800122c:	4b04      	ldr	r3, [pc, #16]	@ (8001240 <__NVIC_GetPriorityGrouping+0x18>)
 800122e:	68db      	ldr	r3, [r3, #12]
 8001230:	0a1b      	lsrs	r3, r3, #8
 8001232:	f003 0307 	and.w	r3, r3, #7
}
 8001236:	4618      	mov	r0, r3
 8001238:	46bd      	mov	sp, r7
 800123a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123e:	4770      	bx	lr
 8001240:	e000ed00 	.word	0xe000ed00

08001244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001244:	b480      	push	{r7}
 8001246:	b083      	sub	sp, #12
 8001248:	af00      	add	r7, sp, #0
 800124a:	4603      	mov	r3, r0
 800124c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800124e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001252:	2b00      	cmp	r3, #0
 8001254:	db0b      	blt.n	800126e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	f003 021f 	and.w	r2, r3, #31
 800125c:	4907      	ldr	r1, [pc, #28]	@ (800127c <__NVIC_EnableIRQ+0x38>)
 800125e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	2001      	movs	r0, #1
 8001266:	fa00 f202 	lsl.w	r2, r0, r2
 800126a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800126e:	bf00      	nop
 8001270:	370c      	adds	r7, #12
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	e000e100 	.word	0xe000e100

08001280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001280:	b480      	push	{r7}
 8001282:	b083      	sub	sp, #12
 8001284:	af00      	add	r7, sp, #0
 8001286:	4603      	mov	r3, r0
 8001288:	6039      	str	r1, [r7, #0]
 800128a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800128c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001290:	2b00      	cmp	r3, #0
 8001292:	db0a      	blt.n	80012aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	b2da      	uxtb	r2, r3
 8001298:	490c      	ldr	r1, [pc, #48]	@ (80012cc <__NVIC_SetPriority+0x4c>)
 800129a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800129e:	0112      	lsls	r2, r2, #4
 80012a0:	b2d2      	uxtb	r2, r2
 80012a2:	440b      	add	r3, r1
 80012a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012a8:	e00a      	b.n	80012c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	b2da      	uxtb	r2, r3
 80012ae:	4908      	ldr	r1, [pc, #32]	@ (80012d0 <__NVIC_SetPriority+0x50>)
 80012b0:	79fb      	ldrb	r3, [r7, #7]
 80012b2:	f003 030f 	and.w	r3, r3, #15
 80012b6:	3b04      	subs	r3, #4
 80012b8:	0112      	lsls	r2, r2, #4
 80012ba:	b2d2      	uxtb	r2, r2
 80012bc:	440b      	add	r3, r1
 80012be:	761a      	strb	r2, [r3, #24]
}
 80012c0:	bf00      	nop
 80012c2:	370c      	adds	r7, #12
 80012c4:	46bd      	mov	sp, r7
 80012c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ca:	4770      	bx	lr
 80012cc:	e000e100 	.word	0xe000e100
 80012d0:	e000ed00 	.word	0xe000ed00

080012d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012d4:	b480      	push	{r7}
 80012d6:	b089      	sub	sp, #36	@ 0x24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	60f8      	str	r0, [r7, #12]
 80012dc:	60b9      	str	r1, [r7, #8]
 80012de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80012e0:	68fb      	ldr	r3, [r7, #12]
 80012e2:	f003 0307 	and.w	r3, r3, #7
 80012e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	f1c3 0307 	rsb	r3, r3, #7
 80012ee:	2b04      	cmp	r3, #4
 80012f0:	bf28      	it	cs
 80012f2:	2304      	movcs	r3, #4
 80012f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012f6:	69fb      	ldr	r3, [r7, #28]
 80012f8:	3304      	adds	r3, #4
 80012fa:	2b06      	cmp	r3, #6
 80012fc:	d902      	bls.n	8001304 <NVIC_EncodePriority+0x30>
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	3b03      	subs	r3, #3
 8001302:	e000      	b.n	8001306 <NVIC_EncodePriority+0x32>
 8001304:	2300      	movs	r3, #0
 8001306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001308:	f04f 32ff 	mov.w	r2, #4294967295
 800130c:	69bb      	ldr	r3, [r7, #24]
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43da      	mvns	r2, r3
 8001314:	68bb      	ldr	r3, [r7, #8]
 8001316:	401a      	ands	r2, r3
 8001318:	697b      	ldr	r3, [r7, #20]
 800131a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800131c:	f04f 31ff 	mov.w	r1, #4294967295
 8001320:	697b      	ldr	r3, [r7, #20]
 8001322:	fa01 f303 	lsl.w	r3, r1, r3
 8001326:	43d9      	mvns	r1, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800132c:	4313      	orrs	r3, r2
         );
}
 800132e:	4618      	mov	r0, r3
 8001330:	3724      	adds	r7, #36	@ 0x24
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
	...

0800133c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	3b01      	subs	r3, #1
 8001348:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800134c:	d301      	bcc.n	8001352 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800134e:	2301      	movs	r3, #1
 8001350:	e00f      	b.n	8001372 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001352:	4a0a      	ldr	r2, [pc, #40]	@ (800137c <SysTick_Config+0x40>)
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	3b01      	subs	r3, #1
 8001358:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800135a:	210f      	movs	r1, #15
 800135c:	f04f 30ff 	mov.w	r0, #4294967295
 8001360:	f7ff ff8e 	bl	8001280 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001364:	4b05      	ldr	r3, [pc, #20]	@ (800137c <SysTick_Config+0x40>)
 8001366:	2200      	movs	r2, #0
 8001368:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800136a:	4b04      	ldr	r3, [pc, #16]	@ (800137c <SysTick_Config+0x40>)
 800136c:	2207      	movs	r2, #7
 800136e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001370:	2300      	movs	r3, #0
}
 8001372:	4618      	mov	r0, r3
 8001374:	3708      	adds	r7, #8
 8001376:	46bd      	mov	sp, r7
 8001378:	bd80      	pop	{r7, pc}
 800137a:	bf00      	nop
 800137c:	e000e010 	.word	0xe000e010

08001380 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f7ff ff29 	bl	80011e0 <__NVIC_SetPriorityGrouping>
}
 800138e:	bf00      	nop
 8001390:	3708      	adds	r7, #8
 8001392:	46bd      	mov	sp, r7
 8001394:	bd80      	pop	{r7, pc}

08001396 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001396:	b580      	push	{r7, lr}
 8001398:	b086      	sub	sp, #24
 800139a:	af00      	add	r7, sp, #0
 800139c:	4603      	mov	r3, r0
 800139e:	60b9      	str	r1, [r7, #8]
 80013a0:	607a      	str	r2, [r7, #4]
 80013a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013a4:	2300      	movs	r3, #0
 80013a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013a8:	f7ff ff3e 	bl	8001228 <__NVIC_GetPriorityGrouping>
 80013ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013ae:	687a      	ldr	r2, [r7, #4]
 80013b0:	68b9      	ldr	r1, [r7, #8]
 80013b2:	6978      	ldr	r0, [r7, #20]
 80013b4:	f7ff ff8e 	bl	80012d4 <NVIC_EncodePriority>
 80013b8:	4602      	mov	r2, r0
 80013ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013be:	4611      	mov	r1, r2
 80013c0:	4618      	mov	r0, r3
 80013c2:	f7ff ff5d 	bl	8001280 <__NVIC_SetPriority>
}
 80013c6:	bf00      	nop
 80013c8:	3718      	adds	r7, #24
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013ce:	b580      	push	{r7, lr}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4603      	mov	r3, r0
 80013d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80013d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013dc:	4618      	mov	r0, r3
 80013de:	f7ff ff31 	bl	8001244 <__NVIC_EnableIRQ>
}
 80013e2:	bf00      	nop
 80013e4:	3708      	adds	r7, #8
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bd80      	pop	{r7, pc}

080013ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013ea:	b580      	push	{r7, lr}
 80013ec:	b082      	sub	sp, #8
 80013ee:	af00      	add	r7, sp, #0
 80013f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f7ff ffa2 	bl	800133c <SysTick_Config>
 80013f8:	4603      	mov	r3, r0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800140e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001410:	f7ff feda 	bl	80011c8 <HAL_GetTick>
 8001414:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800141c:	b2db      	uxtb	r3, r3
 800141e:	2b02      	cmp	r3, #2
 8001420:	d008      	beq.n	8001434 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	2280      	movs	r2, #128	@ 0x80
 8001426:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001430:	2301      	movs	r3, #1
 8001432:	e052      	b.n	80014da <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f022 0216 	bic.w	r2, r2, #22
 8001442:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	695a      	ldr	r2, [r3, #20]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001452:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001458:	2b00      	cmp	r3, #0
 800145a:	d103      	bne.n	8001464 <HAL_DMA_Abort+0x62>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001460:	2b00      	cmp	r3, #0
 8001462:	d007      	beq.n	8001474 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f022 0208 	bic.w	r2, r2, #8
 8001472:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	681a      	ldr	r2, [r3, #0]
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	f022 0201 	bic.w	r2, r2, #1
 8001482:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001484:	e013      	b.n	80014ae <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001486:	f7ff fe9f 	bl	80011c8 <HAL_GetTick>
 800148a:	4602      	mov	r2, r0
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	2b05      	cmp	r3, #5
 8001492:	d90c      	bls.n	80014ae <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2220      	movs	r2, #32
 8001498:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2203      	movs	r2, #3
 800149e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 80014aa:	2303      	movs	r3, #3
 80014ac:	e015      	b.n	80014da <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d1e4      	bne.n	8001486 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014c0:	223f      	movs	r2, #63	@ 0x3f
 80014c2:	409a      	lsls	r2, r3
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2201      	movs	r2, #1
 80014cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80014d8:	2300      	movs	r3, #0
}
 80014da:	4618      	mov	r0, r3
 80014dc:	3710      	adds	r7, #16
 80014de:	46bd      	mov	sp, r7
 80014e0:	bd80      	pop	{r7, pc}

080014e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014f0:	b2db      	uxtb	r3, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d004      	beq.n	8001500 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	2280      	movs	r2, #128	@ 0x80
 80014fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80014fc:	2301      	movs	r3, #1
 80014fe:	e00c      	b.n	800151a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2205      	movs	r2, #5
 8001504:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	681a      	ldr	r2, [r3, #0]
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	f022 0201 	bic.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001518:	2300      	movs	r3, #0
}
 800151a:	4618      	mov	r0, r3
 800151c:	370c      	adds	r7, #12
 800151e:	46bd      	mov	sp, r7
 8001520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001524:	4770      	bx	lr
	...

08001528 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001528:	b480      	push	{r7}
 800152a:	b089      	sub	sp, #36	@ 0x24
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001532:	2300      	movs	r3, #0
 8001534:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001536:	2300      	movs	r3, #0
 8001538:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800153a:	2300      	movs	r3, #0
 800153c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800153e:	2300      	movs	r3, #0
 8001540:	61fb      	str	r3, [r7, #28]
 8001542:	e159      	b.n	80017f8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001544:	2201      	movs	r2, #1
 8001546:	69fb      	ldr	r3, [r7, #28]
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4013      	ands	r3, r2
 8001556:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001558:	693a      	ldr	r2, [r7, #16]
 800155a:	697b      	ldr	r3, [r7, #20]
 800155c:	429a      	cmp	r2, r3
 800155e:	f040 8148 	bne.w	80017f2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f003 0303 	and.w	r3, r3, #3
 800156a:	2b01      	cmp	r3, #1
 800156c:	d005      	beq.n	800157a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001576:	2b02      	cmp	r3, #2
 8001578:	d130      	bne.n	80015dc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001580:	69fb      	ldr	r3, [r7, #28]
 8001582:	005b      	lsls	r3, r3, #1
 8001584:	2203      	movs	r2, #3
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43db      	mvns	r3, r3
 800158c:	69ba      	ldr	r2, [r7, #24]
 800158e:	4013      	ands	r3, r2
 8001590:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	68da      	ldr	r2, [r3, #12]
 8001596:	69fb      	ldr	r3, [r7, #28]
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	fa02 f303 	lsl.w	r3, r2, r3
 800159e:	69ba      	ldr	r2, [r7, #24]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69ba      	ldr	r2, [r7, #24]
 80015a8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80015b0:	2201      	movs	r2, #1
 80015b2:	69fb      	ldr	r3, [r7, #28]
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	43db      	mvns	r3, r3
 80015ba:	69ba      	ldr	r2, [r7, #24]
 80015bc:	4013      	ands	r3, r2
 80015be:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	091b      	lsrs	r3, r3, #4
 80015c6:	f003 0201 	and.w	r2, r3, #1
 80015ca:	69fb      	ldr	r3, [r7, #28]
 80015cc:	fa02 f303 	lsl.w	r3, r2, r3
 80015d0:	69ba      	ldr	r2, [r7, #24]
 80015d2:	4313      	orrs	r3, r2
 80015d4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	69ba      	ldr	r2, [r7, #24]
 80015da:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f003 0303 	and.w	r3, r3, #3
 80015e4:	2b03      	cmp	r3, #3
 80015e6:	d017      	beq.n	8001618 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	68db      	ldr	r3, [r3, #12]
 80015ec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	005b      	lsls	r3, r3, #1
 80015f2:	2203      	movs	r2, #3
 80015f4:	fa02 f303 	lsl.w	r3, r2, r3
 80015f8:	43db      	mvns	r3, r3
 80015fa:	69ba      	ldr	r2, [r7, #24]
 80015fc:	4013      	ands	r3, r2
 80015fe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	689a      	ldr	r2, [r3, #8]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	005b      	lsls	r3, r3, #1
 8001608:	fa02 f303 	lsl.w	r3, r2, r3
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	4313      	orrs	r3, r2
 8001610:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	685b      	ldr	r3, [r3, #4]
 800161c:	f003 0303 	and.w	r3, r3, #3
 8001620:	2b02      	cmp	r3, #2
 8001622:	d123      	bne.n	800166c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001624:	69fb      	ldr	r3, [r7, #28]
 8001626:	08da      	lsrs	r2, r3, #3
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	3208      	adds	r2, #8
 800162c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001630:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	f003 0307 	and.w	r3, r3, #7
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	220f      	movs	r2, #15
 800163c:	fa02 f303 	lsl.w	r3, r2, r3
 8001640:	43db      	mvns	r3, r3
 8001642:	69ba      	ldr	r2, [r7, #24]
 8001644:	4013      	ands	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	691a      	ldr	r2, [r3, #16]
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	f003 0307 	and.w	r3, r3, #7
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	fa02 f303 	lsl.w	r3, r2, r3
 8001658:	69ba      	ldr	r2, [r7, #24]
 800165a:	4313      	orrs	r3, r2
 800165c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800165e:	69fb      	ldr	r3, [r7, #28]
 8001660:	08da      	lsrs	r2, r3, #3
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	3208      	adds	r2, #8
 8001666:	69b9      	ldr	r1, [r7, #24]
 8001668:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	69ba      	ldr	r2, [r7, #24]
 8001680:	4013      	ands	r3, r2
 8001682:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	685b      	ldr	r3, [r3, #4]
 8001688:	f003 0203 	and.w	r2, r3, #3
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	005b      	lsls	r3, r3, #1
 8001690:	fa02 f303 	lsl.w	r3, r2, r3
 8001694:	69ba      	ldr	r2, [r7, #24]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69ba      	ldr	r2, [r7, #24]
 800169e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	685b      	ldr	r3, [r3, #4]
 80016a4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80a2 	beq.w	80017f2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ae:	2300      	movs	r3, #0
 80016b0:	60fb      	str	r3, [r7, #12]
 80016b2:	4b57      	ldr	r3, [pc, #348]	@ (8001810 <HAL_GPIO_Init+0x2e8>)
 80016b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016b6:	4a56      	ldr	r2, [pc, #344]	@ (8001810 <HAL_GPIO_Init+0x2e8>)
 80016b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80016be:	4b54      	ldr	r3, [pc, #336]	@ (8001810 <HAL_GPIO_Init+0x2e8>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016c6:	60fb      	str	r3, [r7, #12]
 80016c8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80016ca:	4a52      	ldr	r2, [pc, #328]	@ (8001814 <HAL_GPIO_Init+0x2ec>)
 80016cc:	69fb      	ldr	r3, [r7, #28]
 80016ce:	089b      	lsrs	r3, r3, #2
 80016d0:	3302      	adds	r3, #2
 80016d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80016d8:	69fb      	ldr	r3, [r7, #28]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	009b      	lsls	r3, r3, #2
 80016e0:	220f      	movs	r2, #15
 80016e2:	fa02 f303 	lsl.w	r3, r2, r3
 80016e6:	43db      	mvns	r3, r3
 80016e8:	69ba      	ldr	r2, [r7, #24]
 80016ea:	4013      	ands	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4a49      	ldr	r2, [pc, #292]	@ (8001818 <HAL_GPIO_Init+0x2f0>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d019      	beq.n	800172a <HAL_GPIO_Init+0x202>
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	4a48      	ldr	r2, [pc, #288]	@ (800181c <HAL_GPIO_Init+0x2f4>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d013      	beq.n	8001726 <HAL_GPIO_Init+0x1fe>
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	4a47      	ldr	r2, [pc, #284]	@ (8001820 <HAL_GPIO_Init+0x2f8>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d00d      	beq.n	8001722 <HAL_GPIO_Init+0x1fa>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	4a46      	ldr	r2, [pc, #280]	@ (8001824 <HAL_GPIO_Init+0x2fc>)
 800170a:	4293      	cmp	r3, r2
 800170c:	d007      	beq.n	800171e <HAL_GPIO_Init+0x1f6>
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	4a45      	ldr	r2, [pc, #276]	@ (8001828 <HAL_GPIO_Init+0x300>)
 8001712:	4293      	cmp	r3, r2
 8001714:	d101      	bne.n	800171a <HAL_GPIO_Init+0x1f2>
 8001716:	2304      	movs	r3, #4
 8001718:	e008      	b.n	800172c <HAL_GPIO_Init+0x204>
 800171a:	2307      	movs	r3, #7
 800171c:	e006      	b.n	800172c <HAL_GPIO_Init+0x204>
 800171e:	2303      	movs	r3, #3
 8001720:	e004      	b.n	800172c <HAL_GPIO_Init+0x204>
 8001722:	2302      	movs	r3, #2
 8001724:	e002      	b.n	800172c <HAL_GPIO_Init+0x204>
 8001726:	2301      	movs	r3, #1
 8001728:	e000      	b.n	800172c <HAL_GPIO_Init+0x204>
 800172a:	2300      	movs	r3, #0
 800172c:	69fa      	ldr	r2, [r7, #28]
 800172e:	f002 0203 	and.w	r2, r2, #3
 8001732:	0092      	lsls	r2, r2, #2
 8001734:	4093      	lsls	r3, r2
 8001736:	69ba      	ldr	r2, [r7, #24]
 8001738:	4313      	orrs	r3, r2
 800173a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800173c:	4935      	ldr	r1, [pc, #212]	@ (8001814 <HAL_GPIO_Init+0x2ec>)
 800173e:	69fb      	ldr	r3, [r7, #28]
 8001740:	089b      	lsrs	r3, r3, #2
 8001742:	3302      	adds	r3, #2
 8001744:	69ba      	ldr	r2, [r7, #24]
 8001746:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800174a:	4b38      	ldr	r3, [pc, #224]	@ (800182c <HAL_GPIO_Init+0x304>)
 800174c:	689b      	ldr	r3, [r3, #8]
 800174e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	43db      	mvns	r3, r3
 8001754:	69ba      	ldr	r2, [r7, #24]
 8001756:	4013      	ands	r3, r2
 8001758:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800175a:	683b      	ldr	r3, [r7, #0]
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001762:	2b00      	cmp	r3, #0
 8001764:	d003      	beq.n	800176e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001766:	69ba      	ldr	r2, [r7, #24]
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	4313      	orrs	r3, r2
 800176c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800176e:	4a2f      	ldr	r2, [pc, #188]	@ (800182c <HAL_GPIO_Init+0x304>)
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001774:	4b2d      	ldr	r3, [pc, #180]	@ (800182c <HAL_GPIO_Init+0x304>)
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	43db      	mvns	r3, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4013      	ands	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	685b      	ldr	r3, [r3, #4]
 8001788:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800178c:	2b00      	cmp	r3, #0
 800178e:	d003      	beq.n	8001798 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001790:	69ba      	ldr	r2, [r7, #24]
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	4313      	orrs	r3, r2
 8001796:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001798:	4a24      	ldr	r2, [pc, #144]	@ (800182c <HAL_GPIO_Init+0x304>)
 800179a:	69bb      	ldr	r3, [r7, #24]
 800179c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800179e:	4b23      	ldr	r3, [pc, #140]	@ (800182c <HAL_GPIO_Init+0x304>)
 80017a0:	685b      	ldr	r3, [r3, #4]
 80017a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	43db      	mvns	r3, r3
 80017a8:	69ba      	ldr	r2, [r7, #24]
 80017aa:	4013      	ands	r3, r2
 80017ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d003      	beq.n	80017c2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80017ba:	69ba      	ldr	r2, [r7, #24]
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	4313      	orrs	r3, r2
 80017c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80017c2:	4a1a      	ldr	r2, [pc, #104]	@ (800182c <HAL_GPIO_Init+0x304>)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80017c8:	4b18      	ldr	r3, [pc, #96]	@ (800182c <HAL_GPIO_Init+0x304>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d003      	beq.n	80017ec <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80017e4:	69ba      	ldr	r2, [r7, #24]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	4313      	orrs	r3, r2
 80017ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80017ec:	4a0f      	ldr	r2, [pc, #60]	@ (800182c <HAL_GPIO_Init+0x304>)
 80017ee:	69bb      	ldr	r3, [r7, #24]
 80017f0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	3301      	adds	r3, #1
 80017f6:	61fb      	str	r3, [r7, #28]
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	2b0f      	cmp	r3, #15
 80017fc:	f67f aea2 	bls.w	8001544 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001800:	bf00      	nop
 8001802:	bf00      	nop
 8001804:	3724      	adds	r7, #36	@ 0x24
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	40023800 	.word	0x40023800
 8001814:	40013800 	.word	0x40013800
 8001818:	40020000 	.word	0x40020000
 800181c:	40020400 	.word	0x40020400
 8001820:	40020800 	.word	0x40020800
 8001824:	40020c00 	.word	0x40020c00
 8001828:	40021000 	.word	0x40021000
 800182c:	40013c00 	.word	0x40013c00

08001830 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	460b      	mov	r3, r1
 800183a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	691a      	ldr	r2, [r3, #16]
 8001840:	887b      	ldrh	r3, [r7, #2]
 8001842:	4013      	ands	r3, r2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d002      	beq.n	800184e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001848:	2301      	movs	r3, #1
 800184a:	73fb      	strb	r3, [r7, #15]
 800184c:	e001      	b.n	8001852 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800184e:	2300      	movs	r3, #0
 8001850:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001852:	7bfb      	ldrb	r3, [r7, #15]
}
 8001854:	4618      	mov	r0, r3
 8001856:	3714      	adds	r7, #20
 8001858:	46bd      	mov	sp, r7
 800185a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185e:	4770      	bx	lr

08001860 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	460b      	mov	r3, r1
 800186a:	807b      	strh	r3, [r7, #2]
 800186c:	4613      	mov	r3, r2
 800186e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001870:	787b      	ldrb	r3, [r7, #1]
 8001872:	2b00      	cmp	r3, #0
 8001874:	d003      	beq.n	800187e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001876:	887a      	ldrh	r2, [r7, #2]
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800187c:	e003      	b.n	8001886 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800187e:	887b      	ldrh	r3, [r7, #2]
 8001880:	041a      	lsls	r2, r3, #16
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	619a      	str	r2, [r3, #24]
}
 8001886:	bf00      	nop
 8001888:	370c      	adds	r7, #12
 800188a:	46bd      	mov	sp, r7
 800188c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001890:	4770      	bx	lr
	...

08001894 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800189e:	4b08      	ldr	r3, [pc, #32]	@ (80018c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018a0:	695a      	ldr	r2, [r3, #20]
 80018a2:	88fb      	ldrh	r3, [r7, #6]
 80018a4:	4013      	ands	r3, r2
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d006      	beq.n	80018b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80018aa:	4a05      	ldr	r2, [pc, #20]	@ (80018c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80018ac:	88fb      	ldrh	r3, [r7, #6]
 80018ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80018b0:	88fb      	ldrh	r3, [r7, #6]
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7ff f816 	bl	80008e4 <HAL_GPIO_EXTI_Callback>
  }
}
 80018b8:	bf00      	nop
 80018ba:	3708      	adds	r7, #8
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40013c00 	.word	0x40013c00

080018c4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e267      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0301 	and.w	r3, r3, #1
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d075      	beq.n	80019ce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018e2:	4b88      	ldr	r3, [pc, #544]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 80018e4:	689b      	ldr	r3, [r3, #8]
 80018e6:	f003 030c 	and.w	r3, r3, #12
 80018ea:	2b04      	cmp	r3, #4
 80018ec:	d00c      	beq.n	8001908 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018ee:	4b85      	ldr	r3, [pc, #532]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80018f6:	2b08      	cmp	r3, #8
 80018f8:	d112      	bne.n	8001920 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80018fa:	4b82      	ldr	r3, [pc, #520]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 80018fc:	685b      	ldr	r3, [r3, #4]
 80018fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001902:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001906:	d10b      	bne.n	8001920 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001908:	4b7e      	ldr	r3, [pc, #504]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d05b      	beq.n	80019cc <HAL_RCC_OscConfig+0x108>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d157      	bne.n	80019cc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	e242      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001928:	d106      	bne.n	8001938 <HAL_RCC_OscConfig+0x74>
 800192a:	4b76      	ldr	r3, [pc, #472]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a75      	ldr	r2, [pc, #468]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001930:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001934:	6013      	str	r3, [r2, #0]
 8001936:	e01d      	b.n	8001974 <HAL_RCC_OscConfig+0xb0>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	685b      	ldr	r3, [r3, #4]
 800193c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001940:	d10c      	bne.n	800195c <HAL_RCC_OscConfig+0x98>
 8001942:	4b70      	ldr	r3, [pc, #448]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a6f      	ldr	r2, [pc, #444]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001948:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800194c:	6013      	str	r3, [r2, #0]
 800194e:	4b6d      	ldr	r3, [pc, #436]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a6c      	ldr	r2, [pc, #432]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001954:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001958:	6013      	str	r3, [r2, #0]
 800195a:	e00b      	b.n	8001974 <HAL_RCC_OscConfig+0xb0>
 800195c:	4b69      	ldr	r3, [pc, #420]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	4a68      	ldr	r2, [pc, #416]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001962:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001966:	6013      	str	r3, [r2, #0]
 8001968:	4b66      	ldr	r3, [pc, #408]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a65      	ldr	r2, [pc, #404]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 800196e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001972:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2b00      	cmp	r3, #0
 800197a:	d013      	beq.n	80019a4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800197c:	f7ff fc24 	bl	80011c8 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001984:	f7ff fc20 	bl	80011c8 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b64      	cmp	r3, #100	@ 0x64
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e207      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001996:	4b5b      	ldr	r3, [pc, #364]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d0f0      	beq.n	8001984 <HAL_RCC_OscConfig+0xc0>
 80019a2:	e014      	b.n	80019ce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fc10 	bl	80011c8 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019ac:	f7ff fc0c 	bl	80011c8 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b64      	cmp	r3, #100	@ 0x64
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e1f3      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80019be:	4b51      	ldr	r3, [pc, #324]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0xe8>
 80019ca:	e000      	b.n	80019ce <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80019cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f003 0302 	and.w	r3, r3, #2
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d063      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019da:	4b4a      	ldr	r3, [pc, #296]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	f003 030c 	and.w	r3, r3, #12
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d00b      	beq.n	80019fe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019e6:	4b47      	ldr	r3, [pc, #284]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 80019e8:	689b      	ldr	r3, [r3, #8]
 80019ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80019ee:	2b08      	cmp	r3, #8
 80019f0:	d11c      	bne.n	8001a2c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80019f2:	4b44      	ldr	r3, [pc, #272]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d116      	bne.n	8001a2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80019fe:	4b41      	ldr	r3, [pc, #260]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 0302 	and.w	r3, r3, #2
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d005      	beq.n	8001a16 <HAL_RCC_OscConfig+0x152>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	68db      	ldr	r3, [r3, #12]
 8001a0e:	2b01      	cmp	r3, #1
 8001a10:	d001      	beq.n	8001a16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001a12:	2301      	movs	r3, #1
 8001a14:	e1c7      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a16:	4b3b      	ldr	r3, [pc, #236]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	691b      	ldr	r3, [r3, #16]
 8001a22:	00db      	lsls	r3, r3, #3
 8001a24:	4937      	ldr	r1, [pc, #220]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001a26:	4313      	orrs	r3, r2
 8001a28:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001a2a:	e03a      	b.n	8001aa2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d020      	beq.n	8001a76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a34:	4b34      	ldr	r3, [pc, #208]	@ (8001b08 <HAL_RCC_OscConfig+0x244>)
 8001a36:	2201      	movs	r2, #1
 8001a38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a3a:	f7ff fbc5 	bl	80011c8 <HAL_GetTick>
 8001a3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a40:	e008      	b.n	8001a54 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a42:	f7ff fbc1 	bl	80011c8 <HAL_GetTick>
 8001a46:	4602      	mov	r2, r0
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	1ad3      	subs	r3, r2, r3
 8001a4c:	2b02      	cmp	r3, #2
 8001a4e:	d901      	bls.n	8001a54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001a50:	2303      	movs	r3, #3
 8001a52:	e1a8      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a54:	4b2b      	ldr	r3, [pc, #172]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0302 	and.w	r3, r3, #2
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f0      	beq.n	8001a42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a60:	4b28      	ldr	r3, [pc, #160]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	691b      	ldr	r3, [r3, #16]
 8001a6c:	00db      	lsls	r3, r3, #3
 8001a6e:	4925      	ldr	r1, [pc, #148]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001a70:	4313      	orrs	r3, r2
 8001a72:	600b      	str	r3, [r1, #0]
 8001a74:	e015      	b.n	8001aa2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001a76:	4b24      	ldr	r3, [pc, #144]	@ (8001b08 <HAL_RCC_OscConfig+0x244>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff fba4 	bl	80011c8 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a84:	f7ff fba0 	bl	80011c8 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e187      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001a96:	4b1b      	ldr	r3, [pc, #108]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 0302 	and.w	r3, r3, #2
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	f003 0308 	and.w	r3, r3, #8
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d036      	beq.n	8001b1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	695b      	ldr	r3, [r3, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d016      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001ab6:	4b15      	ldr	r3, [pc, #84]	@ (8001b0c <HAL_RCC_OscConfig+0x248>)
 8001ab8:	2201      	movs	r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001abc:	f7ff fb84 	bl	80011c8 <HAL_GetTick>
 8001ac0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ac2:	e008      	b.n	8001ad6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ac4:	f7ff fb80 	bl	80011c8 <HAL_GetTick>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	1ad3      	subs	r3, r2, r3
 8001ace:	2b02      	cmp	r3, #2
 8001ad0:	d901      	bls.n	8001ad6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001ad2:	2303      	movs	r3, #3
 8001ad4:	e167      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8001b04 <HAL_RCC_OscConfig+0x240>)
 8001ad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ada:	f003 0302 	and.w	r3, r3, #2
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d0f0      	beq.n	8001ac4 <HAL_RCC_OscConfig+0x200>
 8001ae2:	e01b      	b.n	8001b1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001ae4:	4b09      	ldr	r3, [pc, #36]	@ (8001b0c <HAL_RCC_OscConfig+0x248>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001aea:	f7ff fb6d 	bl	80011c8 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001af0:	e00e      	b.n	8001b10 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001af2:	f7ff fb69 	bl	80011c8 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d907      	bls.n	8001b10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e150      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
 8001b04:	40023800 	.word	0x40023800
 8001b08:	42470000 	.word	0x42470000
 8001b0c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001b10:	4b88      	ldr	r3, [pc, #544]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001b12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001b14:	f003 0302 	and.w	r3, r3, #2
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d1ea      	bne.n	8001af2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0304 	and.w	r3, r3, #4
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	f000 8097 	beq.w	8001c58 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001b2e:	4b81      	ldr	r3, [pc, #516]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001b30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d10f      	bne.n	8001b5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60bb      	str	r3, [r7, #8]
 8001b3e:	4b7d      	ldr	r3, [pc, #500]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b42:	4a7c      	ldr	r2, [pc, #496]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001b44:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001b48:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b4a:	4b7a      	ldr	r3, [pc, #488]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b4e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001b52:	60bb      	str	r3, [r7, #8]
 8001b54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001b56:	2301      	movs	r3, #1
 8001b58:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5a:	4b77      	ldr	r3, [pc, #476]	@ (8001d38 <HAL_RCC_OscConfig+0x474>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d118      	bne.n	8001b98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b66:	4b74      	ldr	r3, [pc, #464]	@ (8001d38 <HAL_RCC_OscConfig+0x474>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	4a73      	ldr	r2, [pc, #460]	@ (8001d38 <HAL_RCC_OscConfig+0x474>)
 8001b6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b72:	f7ff fb29 	bl	80011c8 <HAL_GetTick>
 8001b76:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b78:	e008      	b.n	8001b8c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b7a:	f7ff fb25 	bl	80011c8 <HAL_GetTick>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	1ad3      	subs	r3, r2, r3
 8001b84:	2b02      	cmp	r3, #2
 8001b86:	d901      	bls.n	8001b8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001b88:	2303      	movs	r3, #3
 8001b8a:	e10c      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b8c:	4b6a      	ldr	r3, [pc, #424]	@ (8001d38 <HAL_RCC_OscConfig+0x474>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0f0      	beq.n	8001b7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	689b      	ldr	r3, [r3, #8]
 8001b9c:	2b01      	cmp	r3, #1
 8001b9e:	d106      	bne.n	8001bae <HAL_RCC_OscConfig+0x2ea>
 8001ba0:	4b64      	ldr	r3, [pc, #400]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001ba2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba4:	4a63      	ldr	r2, [pc, #396]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001ba6:	f043 0301 	orr.w	r3, r3, #1
 8001baa:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bac:	e01c      	b.n	8001be8 <HAL_RCC_OscConfig+0x324>
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b05      	cmp	r3, #5
 8001bb4:	d10c      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x30c>
 8001bb6:	4b5f      	ldr	r3, [pc, #380]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001bb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bba:	4a5e      	ldr	r2, [pc, #376]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001bbc:	f043 0304 	orr.w	r3, r3, #4
 8001bc0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bc2:	4b5c      	ldr	r3, [pc, #368]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001bc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bc6:	4a5b      	ldr	r2, [pc, #364]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001bc8:	f043 0301 	orr.w	r3, r3, #1
 8001bcc:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bce:	e00b      	b.n	8001be8 <HAL_RCC_OscConfig+0x324>
 8001bd0:	4b58      	ldr	r3, [pc, #352]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001bd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd4:	4a57      	ldr	r2, [pc, #348]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001bd6:	f023 0301 	bic.w	r3, r3, #1
 8001bda:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bdc:	4b55      	ldr	r3, [pc, #340]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001bde:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be0:	4a54      	ldr	r2, [pc, #336]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001be2:	f023 0304 	bic.w	r3, r3, #4
 8001be6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d015      	beq.n	8001c1c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf0:	f7ff faea 	bl	80011c8 <HAL_GetTick>
 8001bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bf6:	e00a      	b.n	8001c0e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bf8:	f7ff fae6 	bl	80011c8 <HAL_GetTick>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	1ad3      	subs	r3, r2, r3
 8001c02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d901      	bls.n	8001c0e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	e0cb      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0e:	4b49      	ldr	r3, [pc, #292]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001c10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c12:	f003 0302 	and.w	r3, r3, #2
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d0ee      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x334>
 8001c1a:	e014      	b.n	8001c46 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c1c:	f7ff fad4 	bl	80011c8 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c22:	e00a      	b.n	8001c3a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c24:	f7ff fad0 	bl	80011c8 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c32:	4293      	cmp	r3, r2
 8001c34:	d901      	bls.n	8001c3a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001c36:	2303      	movs	r3, #3
 8001c38:	e0b5      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001c3a:	4b3e      	ldr	r3, [pc, #248]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001c3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c3e:	f003 0302 	and.w	r3, r3, #2
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d1ee      	bne.n	8001c24 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001c46:	7dfb      	ldrb	r3, [r7, #23]
 8001c48:	2b01      	cmp	r3, #1
 8001c4a:	d105      	bne.n	8001c58 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001c4c:	4b39      	ldr	r3, [pc, #228]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001c4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c50:	4a38      	ldr	r2, [pc, #224]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001c52:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001c56:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 80a1 	beq.w	8001da4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001c62:	4b34      	ldr	r3, [pc, #208]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 030c 	and.w	r3, r3, #12
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d05c      	beq.n	8001d28 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	699b      	ldr	r3, [r3, #24]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d141      	bne.n	8001cfa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c76:	4b31      	ldr	r3, [pc, #196]	@ (8001d3c <HAL_RCC_OscConfig+0x478>)
 8001c78:	2200      	movs	r2, #0
 8001c7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c7c:	f7ff faa4 	bl	80011c8 <HAL_GetTick>
 8001c80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c82:	e008      	b.n	8001c96 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c84:	f7ff faa0 	bl	80011c8 <HAL_GetTick>
 8001c88:	4602      	mov	r2, r0
 8001c8a:	693b      	ldr	r3, [r7, #16]
 8001c8c:	1ad3      	subs	r3, r2, r3
 8001c8e:	2b02      	cmp	r3, #2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e087      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c96:	4b27      	ldr	r3, [pc, #156]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d1f0      	bne.n	8001c84 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	69da      	ldr	r2, [r3, #28]
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6a1b      	ldr	r3, [r3, #32]
 8001caa:	431a      	orrs	r2, r3
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb0:	019b      	lsls	r3, r3, #6
 8001cb2:	431a      	orrs	r2, r3
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001cb8:	085b      	lsrs	r3, r3, #1
 8001cba:	3b01      	subs	r3, #1
 8001cbc:	041b      	lsls	r3, r3, #16
 8001cbe:	431a      	orrs	r2, r3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cc4:	061b      	lsls	r3, r3, #24
 8001cc6:	491b      	ldr	r1, [pc, #108]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b1b      	ldr	r3, [pc, #108]	@ (8001d3c <HAL_RCC_OscConfig+0x478>)
 8001cce:	2201      	movs	r2, #1
 8001cd0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd2:	f7ff fa79 	bl	80011c8 <HAL_GetTick>
 8001cd6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cda:	f7ff fa75 	bl	80011c8 <HAL_GetTick>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e05c      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001cec:	4b11      	ldr	r3, [pc, #68]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	d0f0      	beq.n	8001cda <HAL_RCC_OscConfig+0x416>
 8001cf8:	e054      	b.n	8001da4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cfa:	4b10      	ldr	r3, [pc, #64]	@ (8001d3c <HAL_RCC_OscConfig+0x478>)
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d00:	f7ff fa62 	bl	80011c8 <HAL_GetTick>
 8001d04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d06:	e008      	b.n	8001d1a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d08:	f7ff fa5e 	bl	80011c8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	693b      	ldr	r3, [r7, #16]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	2b02      	cmp	r3, #2
 8001d14:	d901      	bls.n	8001d1a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001d16:	2303      	movs	r3, #3
 8001d18:	e045      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001d1a:	4b06      	ldr	r3, [pc, #24]	@ (8001d34 <HAL_RCC_OscConfig+0x470>)
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d1f0      	bne.n	8001d08 <HAL_RCC_OscConfig+0x444>
 8001d26:	e03d      	b.n	8001da4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	699b      	ldr	r3, [r3, #24]
 8001d2c:	2b01      	cmp	r3, #1
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001d30:	2301      	movs	r3, #1
 8001d32:	e038      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
 8001d34:	40023800 	.word	0x40023800
 8001d38:	40007000 	.word	0x40007000
 8001d3c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001d40:	4b1b      	ldr	r3, [pc, #108]	@ (8001db0 <HAL_RCC_OscConfig+0x4ec>)
 8001d42:	685b      	ldr	r3, [r3, #4]
 8001d44:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	699b      	ldr	r3, [r3, #24]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d028      	beq.n	8001da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d121      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d66:	429a      	cmp	r2, r3
 8001d68:	d11a      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d6a:	68fa      	ldr	r2, [r7, #12]
 8001d6c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001d70:	4013      	ands	r3, r2
 8001d72:	687a      	ldr	r2, [r7, #4]
 8001d74:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001d76:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d111      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001d86:	085b      	lsrs	r3, r3, #1
 8001d88:	3b01      	subs	r3, #1
 8001d8a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001d8c:	429a      	cmp	r2, r3
 8001d8e:	d107      	bne.n	8001da0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d9a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001d9c:	429a      	cmp	r2, r3
 8001d9e:	d001      	beq.n	8001da4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e000      	b.n	8001da6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3718      	adds	r7, #24
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	40023800 	.word	0x40023800

08001db4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b084      	sub	sp, #16
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
 8001dbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dc4:	2301      	movs	r3, #1
 8001dc6:	e0cc      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dc8:	4b68      	ldr	r3, [pc, #416]	@ (8001f6c <HAL_RCC_ClockConfig+0x1b8>)
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0307 	and.w	r3, r3, #7
 8001dd0:	683a      	ldr	r2, [r7, #0]
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d90c      	bls.n	8001df0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001dd6:	4b65      	ldr	r3, [pc, #404]	@ (8001f6c <HAL_RCC_ClockConfig+0x1b8>)
 8001dd8:	683a      	ldr	r2, [r7, #0]
 8001dda:	b2d2      	uxtb	r2, r2
 8001ddc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dde:	4b63      	ldr	r3, [pc, #396]	@ (8001f6c <HAL_RCC_ClockConfig+0x1b8>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 0307 	and.w	r3, r3, #7
 8001de6:	683a      	ldr	r2, [r7, #0]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d001      	beq.n	8001df0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dec:	2301      	movs	r3, #1
 8001dee:	e0b8      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	f003 0302 	and.w	r3, r3, #2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d020      	beq.n	8001e3e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e08:	4b59      	ldr	r3, [pc, #356]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	4a58      	ldr	r2, [pc, #352]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e12:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f003 0308 	and.w	r3, r3, #8
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d005      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e20:	4b53      	ldr	r3, [pc, #332]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	4a52      	ldr	r2, [pc, #328]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e26:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e2a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e2c:	4b50      	ldr	r3, [pc, #320]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2e:	689b      	ldr	r3, [r3, #8]
 8001e30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	494d      	ldr	r1, [pc, #308]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f003 0301 	and.w	r3, r3, #1
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d044      	beq.n	8001ed4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	2b01      	cmp	r3, #1
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e52:	4b47      	ldr	r3, [pc, #284]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d119      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e07f      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d003      	beq.n	8001e72 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e6e:	2b03      	cmp	r3, #3
 8001e70:	d107      	bne.n	8001e82 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e72:	4b3f      	ldr	r3, [pc, #252]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d109      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e7e:	2301      	movs	r3, #1
 8001e80:	e06f      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e82:	4b3b      	ldr	r3, [pc, #236]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0302 	and.w	r3, r3, #2
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e067      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e92:	4b37      	ldr	r3, [pc, #220]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f023 0203 	bic.w	r2, r3, #3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4934      	ldr	r1, [pc, #208]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ea4:	f7ff f990 	bl	80011c8 <HAL_GetTick>
 8001ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eaa:	e00a      	b.n	8001ec2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eac:	f7ff f98c 	bl	80011c8 <HAL_GetTick>
 8001eb0:	4602      	mov	r2, r0
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	1ad3      	subs	r3, r2, r3
 8001eb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d901      	bls.n	8001ec2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	e04f      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f003 020c 	and.w	r2, r3, #12
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	009b      	lsls	r3, r3, #2
 8001ed0:	429a      	cmp	r2, r3
 8001ed2:	d1eb      	bne.n	8001eac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b25      	ldr	r3, [pc, #148]	@ (8001f6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d20c      	bcs.n	8001efc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b22      	ldr	r3, [pc, #136]	@ (8001f6c <HAL_RCC_ClockConfig+0x1b8>)
 8001ee4:	683a      	ldr	r2, [r7, #0]
 8001ee6:	b2d2      	uxtb	r2, r2
 8001ee8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eea:	4b20      	ldr	r3, [pc, #128]	@ (8001f6c <HAL_RCC_ClockConfig+0x1b8>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0307 	and.w	r3, r3, #7
 8001ef2:	683a      	ldr	r2, [r7, #0]
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d001      	beq.n	8001efc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e032      	b.n	8001f62 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0304 	and.w	r3, r3, #4
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d008      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f08:	4b19      	ldr	r3, [pc, #100]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	68db      	ldr	r3, [r3, #12]
 8001f14:	4916      	ldr	r1, [pc, #88]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0308 	and.w	r3, r3, #8
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d009      	beq.n	8001f3a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f26:	4b12      	ldr	r3, [pc, #72]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001f28:	689b      	ldr	r3, [r3, #8]
 8001f2a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	490e      	ldr	r1, [pc, #56]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001f36:	4313      	orrs	r3, r2
 8001f38:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f3a:	f000 f821 	bl	8001f80 <HAL_RCC_GetSysClockFreq>
 8001f3e:	4602      	mov	r2, r0
 8001f40:	4b0b      	ldr	r3, [pc, #44]	@ (8001f70 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	091b      	lsrs	r3, r3, #4
 8001f46:	f003 030f 	and.w	r3, r3, #15
 8001f4a:	490a      	ldr	r1, [pc, #40]	@ (8001f74 <HAL_RCC_ClockConfig+0x1c0>)
 8001f4c:	5ccb      	ldrb	r3, [r1, r3]
 8001f4e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f52:	4a09      	ldr	r2, [pc, #36]	@ (8001f78 <HAL_RCC_ClockConfig+0x1c4>)
 8001f54:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f56:	4b09      	ldr	r3, [pc, #36]	@ (8001f7c <HAL_RCC_ClockConfig+0x1c8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7ff f8f0 	bl	8001140 <HAL_InitTick>

  return HAL_OK;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3710      	adds	r7, #16
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	40023c00 	.word	0x40023c00
 8001f70:	40023800 	.word	0x40023800
 8001f74:	080033f8 	.word	0x080033f8
 8001f78:	20000120 	.word	0x20000120
 8001f7c:	20000124 	.word	0x20000124

08001f80 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f84:	b094      	sub	sp, #80	@ 0x50
 8001f86:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001f8c:	2300      	movs	r3, #0
 8001f8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001f90:	2300      	movs	r3, #0
 8001f92:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001f98:	4b79      	ldr	r3, [pc, #484]	@ (8002180 <HAL_RCC_GetSysClockFreq+0x200>)
 8001f9a:	689b      	ldr	r3, [r3, #8]
 8001f9c:	f003 030c 	and.w	r3, r3, #12
 8001fa0:	2b08      	cmp	r3, #8
 8001fa2:	d00d      	beq.n	8001fc0 <HAL_RCC_GetSysClockFreq+0x40>
 8001fa4:	2b08      	cmp	r3, #8
 8001fa6:	f200 80e1 	bhi.w	800216c <HAL_RCC_GetSysClockFreq+0x1ec>
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fae:	2b04      	cmp	r3, #4
 8001fb0:	d003      	beq.n	8001fba <HAL_RCC_GetSysClockFreq+0x3a>
 8001fb2:	e0db      	b.n	800216c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001fb4:	4b73      	ldr	r3, [pc, #460]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x204>)
 8001fb6:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fb8:	e0db      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001fba:	4b73      	ldr	r3, [pc, #460]	@ (8002188 <HAL_RCC_GetSysClockFreq+0x208>)
 8001fbc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001fbe:	e0d8      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001fc0:	4b6f      	ldr	r3, [pc, #444]	@ (8002180 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fc8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001fca:	4b6d      	ldr	r3, [pc, #436]	@ (8002180 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fcc:	685b      	ldr	r3, [r3, #4]
 8001fce:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d063      	beq.n	800209e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fd6:	4b6a      	ldr	r3, [pc, #424]	@ (8002180 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	099b      	lsrs	r3, r3, #6
 8001fdc:	2200      	movs	r2, #0
 8001fde:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fe0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001fe4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001fe8:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fea:	2300      	movs	r3, #0
 8001fec:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fee:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001ff2:	4622      	mov	r2, r4
 8001ff4:	462b      	mov	r3, r5
 8001ff6:	f04f 0000 	mov.w	r0, #0
 8001ffa:	f04f 0100 	mov.w	r1, #0
 8001ffe:	0159      	lsls	r1, r3, #5
 8002000:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002004:	0150      	lsls	r0, r2, #5
 8002006:	4602      	mov	r2, r0
 8002008:	460b      	mov	r3, r1
 800200a:	4621      	mov	r1, r4
 800200c:	1a51      	subs	r1, r2, r1
 800200e:	6139      	str	r1, [r7, #16]
 8002010:	4629      	mov	r1, r5
 8002012:	eb63 0301 	sbc.w	r3, r3, r1
 8002016:	617b      	str	r3, [r7, #20]
 8002018:	f04f 0200 	mov.w	r2, #0
 800201c:	f04f 0300 	mov.w	r3, #0
 8002020:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002024:	4659      	mov	r1, fp
 8002026:	018b      	lsls	r3, r1, #6
 8002028:	4651      	mov	r1, sl
 800202a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800202e:	4651      	mov	r1, sl
 8002030:	018a      	lsls	r2, r1, #6
 8002032:	4651      	mov	r1, sl
 8002034:	ebb2 0801 	subs.w	r8, r2, r1
 8002038:	4659      	mov	r1, fp
 800203a:	eb63 0901 	sbc.w	r9, r3, r1
 800203e:	f04f 0200 	mov.w	r2, #0
 8002042:	f04f 0300 	mov.w	r3, #0
 8002046:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800204a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800204e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002052:	4690      	mov	r8, r2
 8002054:	4699      	mov	r9, r3
 8002056:	4623      	mov	r3, r4
 8002058:	eb18 0303 	adds.w	r3, r8, r3
 800205c:	60bb      	str	r3, [r7, #8]
 800205e:	462b      	mov	r3, r5
 8002060:	eb49 0303 	adc.w	r3, r9, r3
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002072:	4629      	mov	r1, r5
 8002074:	024b      	lsls	r3, r1, #9
 8002076:	4621      	mov	r1, r4
 8002078:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800207c:	4621      	mov	r1, r4
 800207e:	024a      	lsls	r2, r1, #9
 8002080:	4610      	mov	r0, r2
 8002082:	4619      	mov	r1, r3
 8002084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002086:	2200      	movs	r2, #0
 8002088:	62bb      	str	r3, [r7, #40]	@ 0x28
 800208a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800208c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002090:	f7fe f8a2 	bl	80001d8 <__aeabi_uldivmod>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4613      	mov	r3, r2
 800209a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800209c:	e058      	b.n	8002150 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800209e:	4b38      	ldr	r3, [pc, #224]	@ (8002180 <HAL_RCC_GetSysClockFreq+0x200>)
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	099b      	lsrs	r3, r3, #6
 80020a4:	2200      	movs	r2, #0
 80020a6:	4618      	mov	r0, r3
 80020a8:	4611      	mov	r1, r2
 80020aa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80020ae:	623b      	str	r3, [r7, #32]
 80020b0:	2300      	movs	r3, #0
 80020b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80020b4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80020b8:	4642      	mov	r2, r8
 80020ba:	464b      	mov	r3, r9
 80020bc:	f04f 0000 	mov.w	r0, #0
 80020c0:	f04f 0100 	mov.w	r1, #0
 80020c4:	0159      	lsls	r1, r3, #5
 80020c6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80020ca:	0150      	lsls	r0, r2, #5
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	4641      	mov	r1, r8
 80020d2:	ebb2 0a01 	subs.w	sl, r2, r1
 80020d6:	4649      	mov	r1, r9
 80020d8:	eb63 0b01 	sbc.w	fp, r3, r1
 80020dc:	f04f 0200 	mov.w	r2, #0
 80020e0:	f04f 0300 	mov.w	r3, #0
 80020e4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80020e8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80020ec:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80020f0:	ebb2 040a 	subs.w	r4, r2, sl
 80020f4:	eb63 050b 	sbc.w	r5, r3, fp
 80020f8:	f04f 0200 	mov.w	r2, #0
 80020fc:	f04f 0300 	mov.w	r3, #0
 8002100:	00eb      	lsls	r3, r5, #3
 8002102:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002106:	00e2      	lsls	r2, r4, #3
 8002108:	4614      	mov	r4, r2
 800210a:	461d      	mov	r5, r3
 800210c:	4643      	mov	r3, r8
 800210e:	18e3      	adds	r3, r4, r3
 8002110:	603b      	str	r3, [r7, #0]
 8002112:	464b      	mov	r3, r9
 8002114:	eb45 0303 	adc.w	r3, r5, r3
 8002118:	607b      	str	r3, [r7, #4]
 800211a:	f04f 0200 	mov.w	r2, #0
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002126:	4629      	mov	r1, r5
 8002128:	028b      	lsls	r3, r1, #10
 800212a:	4621      	mov	r1, r4
 800212c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002130:	4621      	mov	r1, r4
 8002132:	028a      	lsls	r2, r1, #10
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800213a:	2200      	movs	r2, #0
 800213c:	61bb      	str	r3, [r7, #24]
 800213e:	61fa      	str	r2, [r7, #28]
 8002140:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002144:	f7fe f848 	bl	80001d8 <__aeabi_uldivmod>
 8002148:	4602      	mov	r2, r0
 800214a:	460b      	mov	r3, r1
 800214c:	4613      	mov	r3, r2
 800214e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002150:	4b0b      	ldr	r3, [pc, #44]	@ (8002180 <HAL_RCC_GetSysClockFreq+0x200>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	0c1b      	lsrs	r3, r3, #16
 8002156:	f003 0303 	and.w	r3, r3, #3
 800215a:	3301      	adds	r3, #1
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002160:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002162:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002164:	fbb2 f3f3 	udiv	r3, r2, r3
 8002168:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800216a:	e002      	b.n	8002172 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800216c:	4b05      	ldr	r3, [pc, #20]	@ (8002184 <HAL_RCC_GetSysClockFreq+0x204>)
 800216e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002170:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002172:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002174:	4618      	mov	r0, r3
 8002176:	3750      	adds	r7, #80	@ 0x50
 8002178:	46bd      	mov	sp, r7
 800217a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800217e:	bf00      	nop
 8002180:	40023800 	.word	0x40023800
 8002184:	00f42400 	.word	0x00f42400
 8002188:	007a1200 	.word	0x007a1200

0800218c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800218c:	b480      	push	{r7}
 800218e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002190:	4b03      	ldr	r3, [pc, #12]	@ (80021a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002192:	681b      	ldr	r3, [r3, #0]
}
 8002194:	4618      	mov	r0, r3
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000120 	.word	0x20000120

080021a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021a8:	f7ff fff0 	bl	800218c <HAL_RCC_GetHCLKFreq>
 80021ac:	4602      	mov	r2, r0
 80021ae:	4b05      	ldr	r3, [pc, #20]	@ (80021c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021b0:	689b      	ldr	r3, [r3, #8]
 80021b2:	0a9b      	lsrs	r3, r3, #10
 80021b4:	f003 0307 	and.w	r3, r3, #7
 80021b8:	4903      	ldr	r1, [pc, #12]	@ (80021c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ba:	5ccb      	ldrb	r3, [r1, r3]
 80021bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021c0:	4618      	mov	r0, r3
 80021c2:	bd80      	pop	{r7, pc}
 80021c4:	40023800 	.word	0x40023800
 80021c8:	08003408 	.word	0x08003408

080021cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021d0:	f7ff ffdc 	bl	800218c <HAL_RCC_GetHCLKFreq>
 80021d4:	4602      	mov	r2, r0
 80021d6:	4b05      	ldr	r3, [pc, #20]	@ (80021ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80021d8:	689b      	ldr	r3, [r3, #8]
 80021da:	0b5b      	lsrs	r3, r3, #13
 80021dc:	f003 0307 	and.w	r3, r3, #7
 80021e0:	4903      	ldr	r1, [pc, #12]	@ (80021f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021e2:	5ccb      	ldrb	r3, [r1, r3]
 80021e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	bd80      	pop	{r7, pc}
 80021ec:	40023800 	.word	0x40023800
 80021f0:	08003408 	.word	0x08003408

080021f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	b082      	sub	sp, #8
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d101      	bne.n	8002206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002202:	2301      	movs	r3, #1
 8002204:	e042      	b.n	800228c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800220c:	b2db      	uxtb	r3, r3
 800220e:	2b00      	cmp	r3, #0
 8002210:	d106      	bne.n	8002220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7fe fe30 	bl	8000e80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2224      	movs	r2, #36	@ 0x24
 8002224:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68da      	ldr	r2, [r3, #12]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002238:	6878      	ldr	r0, [r7, #4]
 800223a:	f000 fd11 	bl	8002c60 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	691a      	ldr	r2, [r3, #16]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800224c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	695a      	ldr	r2, [r3, #20]
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800225c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800226c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	2200      	movs	r2, #0
 8002272:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2220      	movs	r2, #32
 8002278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2220      	movs	r2, #32
 8002280:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	2200      	movs	r2, #0
 8002288:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}

08002294 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	4613      	mov	r3, r2
 80022a0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d121      	bne.n	80022f2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <HAL_UART_Transmit_IT+0x26>
 80022b4:	88fb      	ldrh	r3, [r7, #6]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d101      	bne.n	80022be <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e01a      	b.n	80022f4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	68ba      	ldr	r2, [r7, #8]
 80022c2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	88fa      	ldrh	r2, [r7, #6]
 80022c8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	88fa      	ldrh	r2, [r7, #6]
 80022ce:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	2200      	movs	r2, #0
 80022d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	2221      	movs	r2, #33	@ 0x21
 80022da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	68da      	ldr	r2, [r3, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80022ec:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80022ee:	2300      	movs	r3, #0
 80022f0:	e000      	b.n	80022f4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80022f2:	2302      	movs	r3, #2
  }
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	3714      	adds	r7, #20
 80022f8:	46bd      	mov	sp, r7
 80022fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fe:	4770      	bx	lr

08002300 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	4613      	mov	r3, r2
 800230c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002314:	b2db      	uxtb	r3, r3
 8002316:	2b20      	cmp	r3, #32
 8002318:	d112      	bne.n	8002340 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800231a:	68bb      	ldr	r3, [r7, #8]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <HAL_UART_Receive_IT+0x26>
 8002320:	88fb      	ldrh	r3, [r7, #6]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d101      	bne.n	800232a <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	e00b      	b.n	8002342 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	2200      	movs	r2, #0
 800232e:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	461a      	mov	r2, r3
 8002334:	68b9      	ldr	r1, [r7, #8]
 8002336:	68f8      	ldr	r0, [r7, #12]
 8002338:	f000 faba 	bl	80028b0 <UART_Start_Receive_IT>
 800233c:	4603      	mov	r3, r0
 800233e:	e000      	b.n	8002342 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8002340:	2302      	movs	r3, #2
  }
}
 8002342:	4618      	mov	r0, r3
 8002344:	3710      	adds	r7, #16
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}
	...

0800234c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b0ba      	sub	sp, #232	@ 0xe8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	695b      	ldr	r3, [r3, #20]
 800236e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002372:	2300      	movs	r3, #0
 8002374:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002378:	2300      	movs	r3, #0
 800237a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800237e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800238a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d10f      	bne.n	80023b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002392:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002396:	f003 0320 	and.w	r3, r3, #32
 800239a:	2b00      	cmp	r3, #0
 800239c:	d009      	beq.n	80023b2 <HAL_UART_IRQHandler+0x66>
 800239e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023a2:	f003 0320 	and.w	r3, r3, #32
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d003      	beq.n	80023b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f000 fb99 	bl	8002ae2 <UART_Receive_IT>
      return;
 80023b0:	e25b      	b.n	800286a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80023b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f000 80de 	beq.w	8002578 <HAL_UART_IRQHandler+0x22c>
 80023bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80023c0:	f003 0301 	and.w	r3, r3, #1
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d106      	bne.n	80023d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80023c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	f000 80d1 	beq.w	8002578 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80023d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023da:	f003 0301 	and.w	r3, r3, #1
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00b      	beq.n	80023fa <HAL_UART_IRQHandler+0xae>
 80023e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80023e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d005      	beq.n	80023fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023f2:	f043 0201 	orr.w	r2, r3, #1
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80023fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80023fe:	f003 0304 	and.w	r3, r3, #4
 8002402:	2b00      	cmp	r3, #0
 8002404:	d00b      	beq.n	800241e <HAL_UART_IRQHandler+0xd2>
 8002406:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	2b00      	cmp	r3, #0
 8002410:	d005      	beq.n	800241e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	f043 0202 	orr.w	r2, r3, #2
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800241e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002422:	f003 0302 	and.w	r3, r3, #2
 8002426:	2b00      	cmp	r3, #0
 8002428:	d00b      	beq.n	8002442 <HAL_UART_IRQHandler+0xf6>
 800242a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800242e:	f003 0301 	and.w	r3, r3, #1
 8002432:	2b00      	cmp	r3, #0
 8002434:	d005      	beq.n	8002442 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243a:	f043 0204 	orr.w	r2, r3, #4
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002446:	f003 0308 	and.w	r3, r3, #8
 800244a:	2b00      	cmp	r3, #0
 800244c:	d011      	beq.n	8002472 <HAL_UART_IRQHandler+0x126>
 800244e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002452:	f003 0320 	and.w	r3, r3, #32
 8002456:	2b00      	cmp	r3, #0
 8002458:	d105      	bne.n	8002466 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800245a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b00      	cmp	r3, #0
 8002464:	d005      	beq.n	8002472 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800246a:	f043 0208 	orr.w	r2, r3, #8
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 81f2 	beq.w	8002860 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800247c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002480:	f003 0320 	and.w	r3, r3, #32
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_UART_IRQHandler+0x14e>
 8002488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b00      	cmp	r3, #0
 8002492:	d002      	beq.n	800249a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 fb24 	bl	8002ae2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	695b      	ldr	r3, [r3, #20]
 80024a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a4:	2b40      	cmp	r3, #64	@ 0x40
 80024a6:	bf0c      	ite	eq
 80024a8:	2301      	moveq	r3, #1
 80024aa:	2300      	movne	r3, #0
 80024ac:	b2db      	uxtb	r3, r3
 80024ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80024b6:	f003 0308 	and.w	r3, r3, #8
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d103      	bne.n	80024c6 <HAL_UART_IRQHandler+0x17a>
 80024be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d04f      	beq.n	8002566 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 fa2c 	bl	8002924 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	695b      	ldr	r3, [r3, #20]
 80024d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024d6:	2b40      	cmp	r3, #64	@ 0x40
 80024d8:	d141      	bne.n	800255e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	3314      	adds	r3, #20
 80024e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80024e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80024e8:	e853 3f00 	ldrex	r3, [r3]
 80024ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80024f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80024f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80024f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	3314      	adds	r3, #20
 8002502:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002506:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800250a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800250e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002512:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002516:	e841 2300 	strex	r3, r2, [r1]
 800251a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800251e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d1d9      	bne.n	80024da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800252a:	2b00      	cmp	r3, #0
 800252c:	d013      	beq.n	8002556 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002532:	4a7e      	ldr	r2, [pc, #504]	@ (800272c <HAL_UART_IRQHandler+0x3e0>)
 8002534:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800253a:	4618      	mov	r0, r3
 800253c:	f7fe ffd1 	bl	80014e2 <HAL_DMA_Abort_IT>
 8002540:	4603      	mov	r3, r0
 8002542:	2b00      	cmp	r3, #0
 8002544:	d016      	beq.n	8002574 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800254a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800254c:	687a      	ldr	r2, [r7, #4]
 800254e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002550:	4610      	mov	r0, r2
 8002552:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002554:	e00e      	b.n	8002574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002556:	6878      	ldr	r0, [r7, #4]
 8002558:	f000 f994 	bl	8002884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800255c:	e00a      	b.n	8002574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800255e:	6878      	ldr	r0, [r7, #4]
 8002560:	f000 f990 	bl	8002884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002564:	e006      	b.n	8002574 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f98c 	bl	8002884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2200      	movs	r2, #0
 8002570:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002572:	e175      	b.n	8002860 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002574:	bf00      	nop
    return;
 8002576:	e173      	b.n	8002860 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800257c:	2b01      	cmp	r3, #1
 800257e:	f040 814f 	bne.w	8002820 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002582:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002586:	f003 0310 	and.w	r3, r3, #16
 800258a:	2b00      	cmp	r3, #0
 800258c:	f000 8148 	beq.w	8002820 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002590:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002594:	f003 0310 	and.w	r3, r3, #16
 8002598:	2b00      	cmp	r3, #0
 800259a:	f000 8141 	beq.w	8002820 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800259e:	2300      	movs	r3, #0
 80025a0:	60bb      	str	r3, [r7, #8]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	60bb      	str	r3, [r7, #8]
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	60bb      	str	r3, [r7, #8]
 80025b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	695b      	ldr	r3, [r3, #20]
 80025ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80025be:	2b40      	cmp	r3, #64	@ 0x40
 80025c0:	f040 80b6 	bne.w	8002730 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	685b      	ldr	r3, [r3, #4]
 80025cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80025d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	f000 8145 	beq.w	8002864 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80025de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80025e2:	429a      	cmp	r2, r3
 80025e4:	f080 813e 	bcs.w	8002864 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80025ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80025f4:	69db      	ldr	r3, [r3, #28]
 80025f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80025fa:	f000 8088 	beq.w	800270e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	330c      	adds	r3, #12
 8002604:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002608:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800260c:	e853 3f00 	ldrex	r3, [r3]
 8002610:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002614:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002618:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800261c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	330c      	adds	r3, #12
 8002626:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800262a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800262e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002632:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002636:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800263a:	e841 2300 	strex	r3, r2, [r1]
 800263e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002642:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002646:	2b00      	cmp	r3, #0
 8002648:	d1d9      	bne.n	80025fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	3314      	adds	r3, #20
 8002650:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002652:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002654:	e853 3f00 	ldrex	r3, [r3]
 8002658:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800265a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800265c:	f023 0301 	bic.w	r3, r3, #1
 8002660:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	3314      	adds	r3, #20
 800266a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800266e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002672:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002674:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002676:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800267a:	e841 2300 	strex	r3, r2, [r1]
 800267e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002680:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1e1      	bne.n	800264a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	3314      	adds	r3, #20
 800268c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800268e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002690:	e853 3f00 	ldrex	r3, [r3]
 8002694:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002696:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002698:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800269c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	3314      	adds	r3, #20
 80026a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80026aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80026ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80026b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80026b2:	e841 2300 	strex	r3, r2, [r1]
 80026b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80026b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1e3      	bne.n	8002686 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2220      	movs	r2, #32
 80026c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	2200      	movs	r2, #0
 80026ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	330c      	adds	r3, #12
 80026d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80026d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80026d6:	e853 3f00 	ldrex	r3, [r3]
 80026da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80026dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80026de:	f023 0310 	bic.w	r3, r3, #16
 80026e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	330c      	adds	r3, #12
 80026ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80026f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80026f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80026f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80026f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80026f8:	e841 2300 	strex	r3, r2, [r1]
 80026fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80026fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002700:	2b00      	cmp	r3, #0
 8002702:	d1e3      	bne.n	80026cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe fe7a 	bl	8001402 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2202      	movs	r2, #2
 8002712:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800271c:	b29b      	uxth	r3, r3
 800271e:	1ad3      	subs	r3, r2, r3
 8002720:	b29b      	uxth	r3, r3
 8002722:	4619      	mov	r1, r3
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 f8b7 	bl	8002898 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800272a:	e09b      	b.n	8002864 <HAL_UART_IRQHandler+0x518>
 800272c:	080029eb 	.word	0x080029eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002738:	b29b      	uxth	r3, r3
 800273a:	1ad3      	subs	r3, r2, r3
 800273c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002744:	b29b      	uxth	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	f000 808e 	beq.w	8002868 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 800274c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002750:	2b00      	cmp	r3, #0
 8002752:	f000 8089 	beq.w	8002868 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	330c      	adds	r3, #12
 800275c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800275e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002760:	e853 3f00 	ldrex	r3, [r3]
 8002764:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002766:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002768:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800276c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	330c      	adds	r3, #12
 8002776:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800277a:	647a      	str	r2, [r7, #68]	@ 0x44
 800277c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800277e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002780:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002782:	e841 2300 	strex	r3, r2, [r1]
 8002786:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002788:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1e3      	bne.n	8002756 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	3314      	adds	r3, #20
 8002794:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002798:	e853 3f00 	ldrex	r3, [r3]
 800279c:	623b      	str	r3, [r7, #32]
   return(result);
 800279e:	6a3b      	ldr	r3, [r7, #32]
 80027a0:	f023 0301 	bic.w	r3, r3, #1
 80027a4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	3314      	adds	r3, #20
 80027ae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80027b2:	633a      	str	r2, [r7, #48]	@ 0x30
 80027b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027b6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80027b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80027ba:	e841 2300 	strex	r3, r2, [r1]
 80027be:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80027c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d1e3      	bne.n	800278e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2220      	movs	r2, #32
 80027ca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	330c      	adds	r3, #12
 80027da:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027dc:	693b      	ldr	r3, [r7, #16]
 80027de:	e853 3f00 	ldrex	r3, [r3]
 80027e2:	60fb      	str	r3, [r7, #12]
   return(result);
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	f023 0310 	bic.w	r3, r3, #16
 80027ea:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	330c      	adds	r3, #12
 80027f4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80027f8:	61fa      	str	r2, [r7, #28]
 80027fa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027fc:	69b9      	ldr	r1, [r7, #24]
 80027fe:	69fa      	ldr	r2, [r7, #28]
 8002800:	e841 2300 	strex	r3, r2, [r1]
 8002804:	617b      	str	r3, [r7, #20]
   return(result);
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1e3      	bne.n	80027d4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2202      	movs	r2, #2
 8002810:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002812:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002816:	4619      	mov	r1, r3
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f83d 	bl	8002898 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800281e:	e023      	b.n	8002868 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002820:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002824:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002828:	2b00      	cmp	r3, #0
 800282a:	d009      	beq.n	8002840 <HAL_UART_IRQHandler+0x4f4>
 800282c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002830:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002838:	6878      	ldr	r0, [r7, #4]
 800283a:	f000 f8ea 	bl	8002a12 <UART_Transmit_IT>
    return;
 800283e:	e014      	b.n	800286a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002840:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002848:	2b00      	cmp	r3, #0
 800284a:	d00e      	beq.n	800286a <HAL_UART_IRQHandler+0x51e>
 800284c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002854:	2b00      	cmp	r3, #0
 8002856:	d008      	beq.n	800286a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f92a 	bl	8002ab2 <UART_EndTransmit_IT>
    return;
 800285e:	e004      	b.n	800286a <HAL_UART_IRQHandler+0x51e>
    return;
 8002860:	bf00      	nop
 8002862:	e002      	b.n	800286a <HAL_UART_IRQHandler+0x51e>
      return;
 8002864:	bf00      	nop
 8002866:	e000      	b.n	800286a <HAL_UART_IRQHandler+0x51e>
      return;
 8002868:	bf00      	nop
  }
}
 800286a:	37e8      	adds	r7, #232	@ 0xe8
 800286c:	46bd      	mov	sp, r7
 800286e:	bd80      	pop	{r7, pc}

08002870 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002870:	b480      	push	{r7}
 8002872:	b083      	sub	sp, #12
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr

08002884 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002884:	b480      	push	{r7}
 8002886:	b083      	sub	sp, #12
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800288c:	bf00      	nop
 800288e:	370c      	adds	r7, #12
 8002890:	46bd      	mov	sp, r7
 8002892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002896:	4770      	bx	lr

08002898 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
 80028a0:	460b      	mov	r3, r1
 80028a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80028a4:	bf00      	nop
 80028a6:	370c      	adds	r7, #12
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr

080028b0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80028b0:	b480      	push	{r7}
 80028b2:	b085      	sub	sp, #20
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	60f8      	str	r0, [r7, #12]
 80028b8:	60b9      	str	r1, [r7, #8]
 80028ba:	4613      	mov	r3, r2
 80028bc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	68ba      	ldr	r2, [r7, #8]
 80028c2:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	88fa      	ldrh	r2, [r7, #6]
 80028c8:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	88fa      	ldrh	r2, [r7, #6]
 80028ce:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	2200      	movs	r2, #0
 80028d4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	2222      	movs	r2, #34	@ 0x22
 80028da:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	691b      	ldr	r3, [r3, #16]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d007      	beq.n	80028f6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	68da      	ldr	r2, [r3, #12]
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80028f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	695a      	ldr	r2, [r3, #20]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f042 0201 	orr.w	r2, r2, #1
 8002904:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	68da      	ldr	r2, [r3, #12]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f042 0220 	orr.w	r2, r2, #32
 8002914:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002916:	2300      	movs	r3, #0
}
 8002918:	4618      	mov	r0, r3
 800291a:	3714      	adds	r7, #20
 800291c:	46bd      	mov	sp, r7
 800291e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002922:	4770      	bx	lr

08002924 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002924:	b480      	push	{r7}
 8002926:	b095      	sub	sp, #84	@ 0x54
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	330c      	adds	r3, #12
 8002932:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002936:	e853 3f00 	ldrex	r3, [r3]
 800293a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800293c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800293e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	330c      	adds	r3, #12
 800294a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800294c:	643a      	str	r2, [r7, #64]	@ 0x40
 800294e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002950:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002952:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002954:	e841 2300 	strex	r3, r2, [r1]
 8002958:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800295a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800295c:	2b00      	cmp	r3, #0
 800295e:	d1e5      	bne.n	800292c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	3314      	adds	r3, #20
 8002966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002968:	6a3b      	ldr	r3, [r7, #32]
 800296a:	e853 3f00 	ldrex	r3, [r3]
 800296e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f023 0301 	bic.w	r3, r3, #1
 8002976:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	3314      	adds	r3, #20
 800297e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002980:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002982:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002988:	e841 2300 	strex	r3, r2, [r1]
 800298c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800298e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002990:	2b00      	cmp	r3, #0
 8002992:	d1e5      	bne.n	8002960 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002998:	2b01      	cmp	r3, #1
 800299a:	d119      	bne.n	80029d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	330c      	adds	r3, #12
 80029a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	e853 3f00 	ldrex	r3, [r3]
 80029aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f023 0310 	bic.w	r3, r3, #16
 80029b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	330c      	adds	r3, #12
 80029ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80029bc:	61ba      	str	r2, [r7, #24]
 80029be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80029c0:	6979      	ldr	r1, [r7, #20]
 80029c2:	69ba      	ldr	r2, [r7, #24]
 80029c4:	e841 2300 	strex	r3, r2, [r1]
 80029c8:	613b      	str	r3, [r7, #16]
   return(result);
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1e5      	bne.n	800299c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2220      	movs	r2, #32
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80029de:	bf00      	nop
 80029e0:	3754      	adds	r7, #84	@ 0x54
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80029ea:	b580      	push	{r7, lr}
 80029ec:	b084      	sub	sp, #16
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80029f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	2200      	movs	r2, #0
 80029fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80029fe:	68fb      	ldr	r3, [r7, #12]
 8002a00:	2200      	movs	r2, #0
 8002a02:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002a04:	68f8      	ldr	r0, [r7, #12]
 8002a06:	f7ff ff3d 	bl	8002884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002a0a:	bf00      	nop
 8002a0c:	3710      	adds	r7, #16
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}

08002a12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002a12:	b480      	push	{r7}
 8002a14:	b085      	sub	sp, #20
 8002a16:	af00      	add	r7, sp, #0
 8002a18:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002a20:	b2db      	uxtb	r3, r3
 8002a22:	2b21      	cmp	r3, #33	@ 0x21
 8002a24:	d13e      	bne.n	8002aa4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	689b      	ldr	r3, [r3, #8]
 8002a2a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a2e:	d114      	bne.n	8002a5a <UART_Transmit_IT+0x48>
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	691b      	ldr	r3, [r3, #16]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d110      	bne.n	8002a5a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a1b      	ldr	r3, [r3, #32]
 8002a3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	881b      	ldrh	r3, [r3, #0]
 8002a42:	461a      	mov	r2, r3
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002a4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6a1b      	ldr	r3, [r3, #32]
 8002a52:	1c9a      	adds	r2, r3, #2
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	621a      	str	r2, [r3, #32]
 8002a58:	e008      	b.n	8002a6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6a1b      	ldr	r3, [r3, #32]
 8002a5e:	1c59      	adds	r1, r3, #1
 8002a60:	687a      	ldr	r2, [r7, #4]
 8002a62:	6211      	str	r1, [r2, #32]
 8002a64:	781a      	ldrb	r2, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	3b01      	subs	r3, #1
 8002a74:	b29b      	uxth	r3, r3
 8002a76:	687a      	ldr	r2, [r7, #4]
 8002a78:	4619      	mov	r1, r3
 8002a7a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10f      	bne.n	8002aa0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002a8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002a9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002aa0:	2300      	movs	r3, #0
 8002aa2:	e000      	b.n	8002aa6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002aa4:	2302      	movs	r3, #2
  }
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002ab2:	b580      	push	{r7, lr}
 8002ab4:	b082      	sub	sp, #8
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	68da      	ldr	r2, [r3, #12]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ac8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2220      	movs	r2, #32
 8002ace:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f7ff fecc 	bl	8002870 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002ad8:	2300      	movs	r3, #0
}
 8002ada:	4618      	mov	r0, r3
 8002adc:	3708      	adds	r7, #8
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b08c      	sub	sp, #48	@ 0x30
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b22      	cmp	r3, #34	@ 0x22
 8002af4:	f040 80ae 	bne.w	8002c54 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	689b      	ldr	r3, [r3, #8]
 8002afc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b00:	d117      	bne.n	8002b32 <UART_Receive_IT+0x50>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	691b      	ldr	r3, [r3, #16]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d113      	bne.n	8002b32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b12:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	685b      	ldr	r3, [r3, #4]
 8002b1a:	b29b      	uxth	r3, r3
 8002b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b20:	b29a      	uxth	r2, r3
 8002b22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b2a:	1c9a      	adds	r2, r3, #2
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	629a      	str	r2, [r3, #40]	@ 0x28
 8002b30:	e026      	b.n	8002b80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b36:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b44:	d007      	beq.n	8002b56 <UART_Receive_IT+0x74>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	689b      	ldr	r3, [r3, #8]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10a      	bne.n	8002b64 <UART_Receive_IT+0x82>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d106      	bne.n	8002b64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	685b      	ldr	r3, [r3, #4]
 8002b5c:	b2da      	uxtb	r2, r3
 8002b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b60:	701a      	strb	r2, [r3, #0]
 8002b62:	e008      	b.n	8002b76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	b2db      	uxtb	r3, r3
 8002b6c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002b70:	b2da      	uxtb	r2, r3
 8002b72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002b74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7a:	1c5a      	adds	r2, r3, #1
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002b84:	b29b      	uxth	r3, r3
 8002b86:	3b01      	subs	r3, #1
 8002b88:	b29b      	uxth	r3, r3
 8002b8a:	687a      	ldr	r2, [r7, #4]
 8002b8c:	4619      	mov	r1, r3
 8002b8e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d15d      	bne.n	8002c50 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68da      	ldr	r2, [r3, #12]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0220 	bic.w	r2, r2, #32
 8002ba2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68da      	ldr	r2, [r3, #12]
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002bb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	695a      	ldr	r2, [r3, #20]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f022 0201 	bic.w	r2, r2, #1
 8002bc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	2220      	movs	r2, #32
 8002bc8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	2200      	movs	r2, #0
 8002bd0:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bd6:	2b01      	cmp	r3, #1
 8002bd8:	d135      	bne.n	8002c46 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2200      	movs	r2, #0
 8002bde:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	330c      	adds	r3, #12
 8002be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002be8:	697b      	ldr	r3, [r7, #20]
 8002bea:	e853 3f00 	ldrex	r3, [r3]
 8002bee:	613b      	str	r3, [r7, #16]
   return(result);
 8002bf0:	693b      	ldr	r3, [r7, #16]
 8002bf2:	f023 0310 	bic.w	r3, r3, #16
 8002bf6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	330c      	adds	r3, #12
 8002bfe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c00:	623a      	str	r2, [r7, #32]
 8002c02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c04:	69f9      	ldr	r1, [r7, #28]
 8002c06:	6a3a      	ldr	r2, [r7, #32]
 8002c08:	e841 2300 	strex	r3, r2, [r1]
 8002c0c:	61bb      	str	r3, [r7, #24]
   return(result);
 8002c0e:	69bb      	ldr	r3, [r7, #24]
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d1e5      	bne.n	8002be0 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f003 0310 	and.w	r3, r3, #16
 8002c1e:	2b10      	cmp	r3, #16
 8002c20:	d10a      	bne.n	8002c38 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c22:	2300      	movs	r3, #0
 8002c24:	60fb      	str	r3, [r7, #12]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60fb      	str	r3, [r7, #12]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	60fb      	str	r3, [r7, #12]
 8002c36:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff fe2a 	bl	8002898 <HAL_UARTEx_RxEventCallback>
 8002c44:	e002      	b.n	8002c4c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002c46:	6878      	ldr	r0, [r7, #4]
 8002c48:	f7fd ffea 	bl	8000c20 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	e002      	b.n	8002c56 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8002c50:	2300      	movs	r3, #0
 8002c52:	e000      	b.n	8002c56 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002c54:	2302      	movs	r3, #2
  }
}
 8002c56:	4618      	mov	r0, r3
 8002c58:	3730      	adds	r7, #48	@ 0x30
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c64:	b0c0      	sub	sp, #256	@ 0x100
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002c78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c7c:	68d9      	ldr	r1, [r3, #12]
 8002c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c82:	681a      	ldr	r2, [r3, #0]
 8002c84:	ea40 0301 	orr.w	r3, r0, r1
 8002c88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c8e:	689a      	ldr	r2, [r3, #8]
 8002c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c94:	691b      	ldr	r3, [r3, #16]
 8002c96:	431a      	orrs	r2, r3
 8002c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	431a      	orrs	r2, r3
 8002ca0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ca4:	69db      	ldr	r3, [r3, #28]
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8002cb8:	f021 010c 	bic.w	r1, r1, #12
 8002cbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8002cc6:	430b      	orrs	r3, r1
 8002cc8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002cca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	695b      	ldr	r3, [r3, #20]
 8002cd2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8002cd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cda:	6999      	ldr	r1, [r3, #24]
 8002cdc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ce0:	681a      	ldr	r2, [r3, #0]
 8002ce2:	ea40 0301 	orr.w	r3, r0, r1
 8002ce6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002ce8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cec:	681a      	ldr	r2, [r3, #0]
 8002cee:	4b8f      	ldr	r3, [pc, #572]	@ (8002f2c <UART_SetConfig+0x2cc>)
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	d005      	beq.n	8002d00 <UART_SetConfig+0xa0>
 8002cf4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4b8d      	ldr	r3, [pc, #564]	@ (8002f30 <UART_SetConfig+0x2d0>)
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d104      	bne.n	8002d0a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002d00:	f7ff fa64 	bl	80021cc <HAL_RCC_GetPCLK2Freq>
 8002d04:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002d08:	e003      	b.n	8002d12 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002d0a:	f7ff fa4b 	bl	80021a4 <HAL_RCC_GetPCLK1Freq>
 8002d0e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002d12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d16:	69db      	ldr	r3, [r3, #28]
 8002d18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d1c:	f040 810c 	bne.w	8002f38 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002d20:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002d24:	2200      	movs	r2, #0
 8002d26:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002d2a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002d2e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002d32:	4622      	mov	r2, r4
 8002d34:	462b      	mov	r3, r5
 8002d36:	1891      	adds	r1, r2, r2
 8002d38:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002d3a:	415b      	adcs	r3, r3
 8002d3c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002d3e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002d42:	4621      	mov	r1, r4
 8002d44:	eb12 0801 	adds.w	r8, r2, r1
 8002d48:	4629      	mov	r1, r5
 8002d4a:	eb43 0901 	adc.w	r9, r3, r1
 8002d4e:	f04f 0200 	mov.w	r2, #0
 8002d52:	f04f 0300 	mov.w	r3, #0
 8002d56:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d5a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d5e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d62:	4690      	mov	r8, r2
 8002d64:	4699      	mov	r9, r3
 8002d66:	4623      	mov	r3, r4
 8002d68:	eb18 0303 	adds.w	r3, r8, r3
 8002d6c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002d70:	462b      	mov	r3, r5
 8002d72:	eb49 0303 	adc.w	r3, r9, r3
 8002d76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002d7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d7e:	685b      	ldr	r3, [r3, #4]
 8002d80:	2200      	movs	r2, #0
 8002d82:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d86:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002d8a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d8e:	460b      	mov	r3, r1
 8002d90:	18db      	adds	r3, r3, r3
 8002d92:	653b      	str	r3, [r7, #80]	@ 0x50
 8002d94:	4613      	mov	r3, r2
 8002d96:	eb42 0303 	adc.w	r3, r2, r3
 8002d9a:	657b      	str	r3, [r7, #84]	@ 0x54
 8002d9c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002da0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002da4:	f7fd fa18 	bl	80001d8 <__aeabi_uldivmod>
 8002da8:	4602      	mov	r2, r0
 8002daa:	460b      	mov	r3, r1
 8002dac:	4b61      	ldr	r3, [pc, #388]	@ (8002f34 <UART_SetConfig+0x2d4>)
 8002dae:	fba3 2302 	umull	r2, r3, r3, r2
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	011c      	lsls	r4, r3, #4
 8002db6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002dc0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002dc4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8002dc8:	4642      	mov	r2, r8
 8002dca:	464b      	mov	r3, r9
 8002dcc:	1891      	adds	r1, r2, r2
 8002dce:	64b9      	str	r1, [r7, #72]	@ 0x48
 8002dd0:	415b      	adcs	r3, r3
 8002dd2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002dd4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002dd8:	4641      	mov	r1, r8
 8002dda:	eb12 0a01 	adds.w	sl, r2, r1
 8002dde:	4649      	mov	r1, r9
 8002de0:	eb43 0b01 	adc.w	fp, r3, r1
 8002de4:	f04f 0200 	mov.w	r2, #0
 8002de8:	f04f 0300 	mov.w	r3, #0
 8002dec:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002df0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002df4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002df8:	4692      	mov	sl, r2
 8002dfa:	469b      	mov	fp, r3
 8002dfc:	4643      	mov	r3, r8
 8002dfe:	eb1a 0303 	adds.w	r3, sl, r3
 8002e02:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e06:	464b      	mov	r3, r9
 8002e08:	eb4b 0303 	adc.w	r3, fp, r3
 8002e0c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e1c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002e20:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002e24:	460b      	mov	r3, r1
 8002e26:	18db      	adds	r3, r3, r3
 8002e28:	643b      	str	r3, [r7, #64]	@ 0x40
 8002e2a:	4613      	mov	r3, r2
 8002e2c:	eb42 0303 	adc.w	r3, r2, r3
 8002e30:	647b      	str	r3, [r7, #68]	@ 0x44
 8002e32:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002e36:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002e3a:	f7fd f9cd 	bl	80001d8 <__aeabi_uldivmod>
 8002e3e:	4602      	mov	r2, r0
 8002e40:	460b      	mov	r3, r1
 8002e42:	4611      	mov	r1, r2
 8002e44:	4b3b      	ldr	r3, [pc, #236]	@ (8002f34 <UART_SetConfig+0x2d4>)
 8002e46:	fba3 2301 	umull	r2, r3, r3, r1
 8002e4a:	095b      	lsrs	r3, r3, #5
 8002e4c:	2264      	movs	r2, #100	@ 0x64
 8002e4e:	fb02 f303 	mul.w	r3, r2, r3
 8002e52:	1acb      	subs	r3, r1, r3
 8002e54:	00db      	lsls	r3, r3, #3
 8002e56:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002e5a:	4b36      	ldr	r3, [pc, #216]	@ (8002f34 <UART_SetConfig+0x2d4>)
 8002e5c:	fba3 2302 	umull	r2, r3, r3, r2
 8002e60:	095b      	lsrs	r3, r3, #5
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002e68:	441c      	add	r4, r3
 8002e6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002e6e:	2200      	movs	r2, #0
 8002e70:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002e74:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002e78:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002e7c:	4642      	mov	r2, r8
 8002e7e:	464b      	mov	r3, r9
 8002e80:	1891      	adds	r1, r2, r2
 8002e82:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002e84:	415b      	adcs	r3, r3
 8002e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002e88:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002e8c:	4641      	mov	r1, r8
 8002e8e:	1851      	adds	r1, r2, r1
 8002e90:	6339      	str	r1, [r7, #48]	@ 0x30
 8002e92:	4649      	mov	r1, r9
 8002e94:	414b      	adcs	r3, r1
 8002e96:	637b      	str	r3, [r7, #52]	@ 0x34
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002ea4:	4659      	mov	r1, fp
 8002ea6:	00cb      	lsls	r3, r1, #3
 8002ea8:	4651      	mov	r1, sl
 8002eaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002eae:	4651      	mov	r1, sl
 8002eb0:	00ca      	lsls	r2, r1, #3
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4642      	mov	r2, r8
 8002eba:	189b      	adds	r3, r3, r2
 8002ebc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002ec0:	464b      	mov	r3, r9
 8002ec2:	460a      	mov	r2, r1
 8002ec4:	eb42 0303 	adc.w	r3, r2, r3
 8002ec8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	2200      	movs	r2, #0
 8002ed4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ed8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002edc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002ee0:	460b      	mov	r3, r1
 8002ee2:	18db      	adds	r3, r3, r3
 8002ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ee6:	4613      	mov	r3, r2
 8002ee8:	eb42 0303 	adc.w	r3, r2, r3
 8002eec:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002eee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ef2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ef6:	f7fd f96f 	bl	80001d8 <__aeabi_uldivmod>
 8002efa:	4602      	mov	r2, r0
 8002efc:	460b      	mov	r3, r1
 8002efe:	4b0d      	ldr	r3, [pc, #52]	@ (8002f34 <UART_SetConfig+0x2d4>)
 8002f00:	fba3 1302 	umull	r1, r3, r3, r2
 8002f04:	095b      	lsrs	r3, r3, #5
 8002f06:	2164      	movs	r1, #100	@ 0x64
 8002f08:	fb01 f303 	mul.w	r3, r1, r3
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	00db      	lsls	r3, r3, #3
 8002f10:	3332      	adds	r3, #50	@ 0x32
 8002f12:	4a08      	ldr	r2, [pc, #32]	@ (8002f34 <UART_SetConfig+0x2d4>)
 8002f14:	fba2 2303 	umull	r2, r3, r2, r3
 8002f18:	095b      	lsrs	r3, r3, #5
 8002f1a:	f003 0207 	and.w	r2, r3, #7
 8002f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4422      	add	r2, r4
 8002f26:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002f28:	e106      	b.n	8003138 <UART_SetConfig+0x4d8>
 8002f2a:	bf00      	nop
 8002f2c:	40011000 	.word	0x40011000
 8002f30:	40011400 	.word	0x40011400
 8002f34:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002f38:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002f42:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002f46:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002f4a:	4642      	mov	r2, r8
 8002f4c:	464b      	mov	r3, r9
 8002f4e:	1891      	adds	r1, r2, r2
 8002f50:	6239      	str	r1, [r7, #32]
 8002f52:	415b      	adcs	r3, r3
 8002f54:	627b      	str	r3, [r7, #36]	@ 0x24
 8002f56:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002f5a:	4641      	mov	r1, r8
 8002f5c:	1854      	adds	r4, r2, r1
 8002f5e:	4649      	mov	r1, r9
 8002f60:	eb43 0501 	adc.w	r5, r3, r1
 8002f64:	f04f 0200 	mov.w	r2, #0
 8002f68:	f04f 0300 	mov.w	r3, #0
 8002f6c:	00eb      	lsls	r3, r5, #3
 8002f6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002f72:	00e2      	lsls	r2, r4, #3
 8002f74:	4614      	mov	r4, r2
 8002f76:	461d      	mov	r5, r3
 8002f78:	4643      	mov	r3, r8
 8002f7a:	18e3      	adds	r3, r4, r3
 8002f7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002f80:	464b      	mov	r3, r9
 8002f82:	eb45 0303 	adc.w	r3, r5, r3
 8002f86:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002f8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	2200      	movs	r2, #0
 8002f92:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002f96:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002fa6:	4629      	mov	r1, r5
 8002fa8:	008b      	lsls	r3, r1, #2
 8002faa:	4621      	mov	r1, r4
 8002fac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002fb0:	4621      	mov	r1, r4
 8002fb2:	008a      	lsls	r2, r1, #2
 8002fb4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002fb8:	f7fd f90e 	bl	80001d8 <__aeabi_uldivmod>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	4b60      	ldr	r3, [pc, #384]	@ (8003144 <UART_SetConfig+0x4e4>)
 8002fc2:	fba3 2302 	umull	r2, r3, r3, r2
 8002fc6:	095b      	lsrs	r3, r3, #5
 8002fc8:	011c      	lsls	r4, r3, #4
 8002fca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002fce:	2200      	movs	r2, #0
 8002fd0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002fd4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002fd8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002fdc:	4642      	mov	r2, r8
 8002fde:	464b      	mov	r3, r9
 8002fe0:	1891      	adds	r1, r2, r2
 8002fe2:	61b9      	str	r1, [r7, #24]
 8002fe4:	415b      	adcs	r3, r3
 8002fe6:	61fb      	str	r3, [r7, #28]
 8002fe8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002fec:	4641      	mov	r1, r8
 8002fee:	1851      	adds	r1, r2, r1
 8002ff0:	6139      	str	r1, [r7, #16]
 8002ff2:	4649      	mov	r1, r9
 8002ff4:	414b      	adcs	r3, r1
 8002ff6:	617b      	str	r3, [r7, #20]
 8002ff8:	f04f 0200 	mov.w	r2, #0
 8002ffc:	f04f 0300 	mov.w	r3, #0
 8003000:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003004:	4659      	mov	r1, fp
 8003006:	00cb      	lsls	r3, r1, #3
 8003008:	4651      	mov	r1, sl
 800300a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800300e:	4651      	mov	r1, sl
 8003010:	00ca      	lsls	r2, r1, #3
 8003012:	4610      	mov	r0, r2
 8003014:	4619      	mov	r1, r3
 8003016:	4603      	mov	r3, r0
 8003018:	4642      	mov	r2, r8
 800301a:	189b      	adds	r3, r3, r2
 800301c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003020:	464b      	mov	r3, r9
 8003022:	460a      	mov	r2, r1
 8003024:	eb42 0303 	adc.w	r3, r2, r3
 8003028:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800302c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003030:	685b      	ldr	r3, [r3, #4]
 8003032:	2200      	movs	r2, #0
 8003034:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003036:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003038:	f04f 0200 	mov.w	r2, #0
 800303c:	f04f 0300 	mov.w	r3, #0
 8003040:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003044:	4649      	mov	r1, r9
 8003046:	008b      	lsls	r3, r1, #2
 8003048:	4641      	mov	r1, r8
 800304a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800304e:	4641      	mov	r1, r8
 8003050:	008a      	lsls	r2, r1, #2
 8003052:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003056:	f7fd f8bf 	bl	80001d8 <__aeabi_uldivmod>
 800305a:	4602      	mov	r2, r0
 800305c:	460b      	mov	r3, r1
 800305e:	4611      	mov	r1, r2
 8003060:	4b38      	ldr	r3, [pc, #224]	@ (8003144 <UART_SetConfig+0x4e4>)
 8003062:	fba3 2301 	umull	r2, r3, r3, r1
 8003066:	095b      	lsrs	r3, r3, #5
 8003068:	2264      	movs	r2, #100	@ 0x64
 800306a:	fb02 f303 	mul.w	r3, r2, r3
 800306e:	1acb      	subs	r3, r1, r3
 8003070:	011b      	lsls	r3, r3, #4
 8003072:	3332      	adds	r3, #50	@ 0x32
 8003074:	4a33      	ldr	r2, [pc, #204]	@ (8003144 <UART_SetConfig+0x4e4>)
 8003076:	fba2 2303 	umull	r2, r3, r2, r3
 800307a:	095b      	lsrs	r3, r3, #5
 800307c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003080:	441c      	add	r4, r3
 8003082:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003086:	2200      	movs	r2, #0
 8003088:	673b      	str	r3, [r7, #112]	@ 0x70
 800308a:	677a      	str	r2, [r7, #116]	@ 0x74
 800308c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003090:	4642      	mov	r2, r8
 8003092:	464b      	mov	r3, r9
 8003094:	1891      	adds	r1, r2, r2
 8003096:	60b9      	str	r1, [r7, #8]
 8003098:	415b      	adcs	r3, r3
 800309a:	60fb      	str	r3, [r7, #12]
 800309c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80030a0:	4641      	mov	r1, r8
 80030a2:	1851      	adds	r1, r2, r1
 80030a4:	6039      	str	r1, [r7, #0]
 80030a6:	4649      	mov	r1, r9
 80030a8:	414b      	adcs	r3, r1
 80030aa:	607b      	str	r3, [r7, #4]
 80030ac:	f04f 0200 	mov.w	r2, #0
 80030b0:	f04f 0300 	mov.w	r3, #0
 80030b4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80030b8:	4659      	mov	r1, fp
 80030ba:	00cb      	lsls	r3, r1, #3
 80030bc:	4651      	mov	r1, sl
 80030be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80030c2:	4651      	mov	r1, sl
 80030c4:	00ca      	lsls	r2, r1, #3
 80030c6:	4610      	mov	r0, r2
 80030c8:	4619      	mov	r1, r3
 80030ca:	4603      	mov	r3, r0
 80030cc:	4642      	mov	r2, r8
 80030ce:	189b      	adds	r3, r3, r2
 80030d0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80030d2:	464b      	mov	r3, r9
 80030d4:	460a      	mov	r2, r1
 80030d6:	eb42 0303 	adc.w	r3, r2, r3
 80030da:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80030dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	2200      	movs	r2, #0
 80030e4:	663b      	str	r3, [r7, #96]	@ 0x60
 80030e6:	667a      	str	r2, [r7, #100]	@ 0x64
 80030e8:	f04f 0200 	mov.w	r2, #0
 80030ec:	f04f 0300 	mov.w	r3, #0
 80030f0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80030f4:	4649      	mov	r1, r9
 80030f6:	008b      	lsls	r3, r1, #2
 80030f8:	4641      	mov	r1, r8
 80030fa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80030fe:	4641      	mov	r1, r8
 8003100:	008a      	lsls	r2, r1, #2
 8003102:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003106:	f7fd f867 	bl	80001d8 <__aeabi_uldivmod>
 800310a:	4602      	mov	r2, r0
 800310c:	460b      	mov	r3, r1
 800310e:	4b0d      	ldr	r3, [pc, #52]	@ (8003144 <UART_SetConfig+0x4e4>)
 8003110:	fba3 1302 	umull	r1, r3, r3, r2
 8003114:	095b      	lsrs	r3, r3, #5
 8003116:	2164      	movs	r1, #100	@ 0x64
 8003118:	fb01 f303 	mul.w	r3, r1, r3
 800311c:	1ad3      	subs	r3, r2, r3
 800311e:	011b      	lsls	r3, r3, #4
 8003120:	3332      	adds	r3, #50	@ 0x32
 8003122:	4a08      	ldr	r2, [pc, #32]	@ (8003144 <UART_SetConfig+0x4e4>)
 8003124:	fba2 2303 	umull	r2, r3, r2, r3
 8003128:	095b      	lsrs	r3, r3, #5
 800312a:	f003 020f 	and.w	r2, r3, #15
 800312e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4422      	add	r2, r4
 8003136:	609a      	str	r2, [r3, #8]
}
 8003138:	bf00      	nop
 800313a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800313e:	46bd      	mov	sp, r7
 8003140:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003144:	51eb851f 	.word	0x51eb851f

08003148 <malloc>:
 8003148:	4b02      	ldr	r3, [pc, #8]	@ (8003154 <malloc+0xc>)
 800314a:	4601      	mov	r1, r0
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	f000 b82d 	b.w	80031ac <_malloc_r>
 8003152:	bf00      	nop
 8003154:	2000012c 	.word	0x2000012c

08003158 <free>:
 8003158:	4b02      	ldr	r3, [pc, #8]	@ (8003164 <free+0xc>)
 800315a:	4601      	mov	r1, r0
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	f000 b8f5 	b.w	800334c <_free_r>
 8003162:	bf00      	nop
 8003164:	2000012c 	.word	0x2000012c

08003168 <sbrk_aligned>:
 8003168:	b570      	push	{r4, r5, r6, lr}
 800316a:	4e0f      	ldr	r6, [pc, #60]	@ (80031a8 <sbrk_aligned+0x40>)
 800316c:	460c      	mov	r4, r1
 800316e:	6831      	ldr	r1, [r6, #0]
 8003170:	4605      	mov	r5, r0
 8003172:	b911      	cbnz	r1, 800317a <sbrk_aligned+0x12>
 8003174:	f000 f8ae 	bl	80032d4 <_sbrk_r>
 8003178:	6030      	str	r0, [r6, #0]
 800317a:	4621      	mov	r1, r4
 800317c:	4628      	mov	r0, r5
 800317e:	f000 f8a9 	bl	80032d4 <_sbrk_r>
 8003182:	1c43      	adds	r3, r0, #1
 8003184:	d103      	bne.n	800318e <sbrk_aligned+0x26>
 8003186:	f04f 34ff 	mov.w	r4, #4294967295
 800318a:	4620      	mov	r0, r4
 800318c:	bd70      	pop	{r4, r5, r6, pc}
 800318e:	1cc4      	adds	r4, r0, #3
 8003190:	f024 0403 	bic.w	r4, r4, #3
 8003194:	42a0      	cmp	r0, r4
 8003196:	d0f8      	beq.n	800318a <sbrk_aligned+0x22>
 8003198:	1a21      	subs	r1, r4, r0
 800319a:	4628      	mov	r0, r5
 800319c:	f000 f89a 	bl	80032d4 <_sbrk_r>
 80031a0:	3001      	adds	r0, #1
 80031a2:	d1f2      	bne.n	800318a <sbrk_aligned+0x22>
 80031a4:	e7ef      	b.n	8003186 <sbrk_aligned+0x1e>
 80031a6:	bf00      	nop
 80031a8:	20000238 	.word	0x20000238

080031ac <_malloc_r>:
 80031ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80031b0:	1ccd      	adds	r5, r1, #3
 80031b2:	f025 0503 	bic.w	r5, r5, #3
 80031b6:	3508      	adds	r5, #8
 80031b8:	2d0c      	cmp	r5, #12
 80031ba:	bf38      	it	cc
 80031bc:	250c      	movcc	r5, #12
 80031be:	2d00      	cmp	r5, #0
 80031c0:	4606      	mov	r6, r0
 80031c2:	db01      	blt.n	80031c8 <_malloc_r+0x1c>
 80031c4:	42a9      	cmp	r1, r5
 80031c6:	d904      	bls.n	80031d2 <_malloc_r+0x26>
 80031c8:	230c      	movs	r3, #12
 80031ca:	6033      	str	r3, [r6, #0]
 80031cc:	2000      	movs	r0, #0
 80031ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80031d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80032a8 <_malloc_r+0xfc>
 80031d6:	f000 f869 	bl	80032ac <__malloc_lock>
 80031da:	f8d8 3000 	ldr.w	r3, [r8]
 80031de:	461c      	mov	r4, r3
 80031e0:	bb44      	cbnz	r4, 8003234 <_malloc_r+0x88>
 80031e2:	4629      	mov	r1, r5
 80031e4:	4630      	mov	r0, r6
 80031e6:	f7ff ffbf 	bl	8003168 <sbrk_aligned>
 80031ea:	1c43      	adds	r3, r0, #1
 80031ec:	4604      	mov	r4, r0
 80031ee:	d158      	bne.n	80032a2 <_malloc_r+0xf6>
 80031f0:	f8d8 4000 	ldr.w	r4, [r8]
 80031f4:	4627      	mov	r7, r4
 80031f6:	2f00      	cmp	r7, #0
 80031f8:	d143      	bne.n	8003282 <_malloc_r+0xd6>
 80031fa:	2c00      	cmp	r4, #0
 80031fc:	d04b      	beq.n	8003296 <_malloc_r+0xea>
 80031fe:	6823      	ldr	r3, [r4, #0]
 8003200:	4639      	mov	r1, r7
 8003202:	4630      	mov	r0, r6
 8003204:	eb04 0903 	add.w	r9, r4, r3
 8003208:	f000 f864 	bl	80032d4 <_sbrk_r>
 800320c:	4581      	cmp	r9, r0
 800320e:	d142      	bne.n	8003296 <_malloc_r+0xea>
 8003210:	6821      	ldr	r1, [r4, #0]
 8003212:	1a6d      	subs	r5, r5, r1
 8003214:	4629      	mov	r1, r5
 8003216:	4630      	mov	r0, r6
 8003218:	f7ff ffa6 	bl	8003168 <sbrk_aligned>
 800321c:	3001      	adds	r0, #1
 800321e:	d03a      	beq.n	8003296 <_malloc_r+0xea>
 8003220:	6823      	ldr	r3, [r4, #0]
 8003222:	442b      	add	r3, r5
 8003224:	6023      	str	r3, [r4, #0]
 8003226:	f8d8 3000 	ldr.w	r3, [r8]
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	bb62      	cbnz	r2, 8003288 <_malloc_r+0xdc>
 800322e:	f8c8 7000 	str.w	r7, [r8]
 8003232:	e00f      	b.n	8003254 <_malloc_r+0xa8>
 8003234:	6822      	ldr	r2, [r4, #0]
 8003236:	1b52      	subs	r2, r2, r5
 8003238:	d420      	bmi.n	800327c <_malloc_r+0xd0>
 800323a:	2a0b      	cmp	r2, #11
 800323c:	d917      	bls.n	800326e <_malloc_r+0xc2>
 800323e:	1961      	adds	r1, r4, r5
 8003240:	42a3      	cmp	r3, r4
 8003242:	6025      	str	r5, [r4, #0]
 8003244:	bf18      	it	ne
 8003246:	6059      	strne	r1, [r3, #4]
 8003248:	6863      	ldr	r3, [r4, #4]
 800324a:	bf08      	it	eq
 800324c:	f8c8 1000 	streq.w	r1, [r8]
 8003250:	5162      	str	r2, [r4, r5]
 8003252:	604b      	str	r3, [r1, #4]
 8003254:	4630      	mov	r0, r6
 8003256:	f000 f82f 	bl	80032b8 <__malloc_unlock>
 800325a:	f104 000b 	add.w	r0, r4, #11
 800325e:	1d23      	adds	r3, r4, #4
 8003260:	f020 0007 	bic.w	r0, r0, #7
 8003264:	1ac2      	subs	r2, r0, r3
 8003266:	bf1c      	itt	ne
 8003268:	1a1b      	subne	r3, r3, r0
 800326a:	50a3      	strne	r3, [r4, r2]
 800326c:	e7af      	b.n	80031ce <_malloc_r+0x22>
 800326e:	6862      	ldr	r2, [r4, #4]
 8003270:	42a3      	cmp	r3, r4
 8003272:	bf0c      	ite	eq
 8003274:	f8c8 2000 	streq.w	r2, [r8]
 8003278:	605a      	strne	r2, [r3, #4]
 800327a:	e7eb      	b.n	8003254 <_malloc_r+0xa8>
 800327c:	4623      	mov	r3, r4
 800327e:	6864      	ldr	r4, [r4, #4]
 8003280:	e7ae      	b.n	80031e0 <_malloc_r+0x34>
 8003282:	463c      	mov	r4, r7
 8003284:	687f      	ldr	r7, [r7, #4]
 8003286:	e7b6      	b.n	80031f6 <_malloc_r+0x4a>
 8003288:	461a      	mov	r2, r3
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	42a3      	cmp	r3, r4
 800328e:	d1fb      	bne.n	8003288 <_malloc_r+0xdc>
 8003290:	2300      	movs	r3, #0
 8003292:	6053      	str	r3, [r2, #4]
 8003294:	e7de      	b.n	8003254 <_malloc_r+0xa8>
 8003296:	230c      	movs	r3, #12
 8003298:	6033      	str	r3, [r6, #0]
 800329a:	4630      	mov	r0, r6
 800329c:	f000 f80c 	bl	80032b8 <__malloc_unlock>
 80032a0:	e794      	b.n	80031cc <_malloc_r+0x20>
 80032a2:	6005      	str	r5, [r0, #0]
 80032a4:	e7d6      	b.n	8003254 <_malloc_r+0xa8>
 80032a6:	bf00      	nop
 80032a8:	2000023c 	.word	0x2000023c

080032ac <__malloc_lock>:
 80032ac:	4801      	ldr	r0, [pc, #4]	@ (80032b4 <__malloc_lock+0x8>)
 80032ae:	f000 b84b 	b.w	8003348 <__retarget_lock_acquire_recursive>
 80032b2:	bf00      	nop
 80032b4:	2000037c 	.word	0x2000037c

080032b8 <__malloc_unlock>:
 80032b8:	4801      	ldr	r0, [pc, #4]	@ (80032c0 <__malloc_unlock+0x8>)
 80032ba:	f000 b846 	b.w	800334a <__retarget_lock_release_recursive>
 80032be:	bf00      	nop
 80032c0:	2000037c 	.word	0x2000037c

080032c4 <memset>:
 80032c4:	4402      	add	r2, r0
 80032c6:	4603      	mov	r3, r0
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d100      	bne.n	80032ce <memset+0xa>
 80032cc:	4770      	bx	lr
 80032ce:	f803 1b01 	strb.w	r1, [r3], #1
 80032d2:	e7f9      	b.n	80032c8 <memset+0x4>

080032d4 <_sbrk_r>:
 80032d4:	b538      	push	{r3, r4, r5, lr}
 80032d6:	4d06      	ldr	r5, [pc, #24]	@ (80032f0 <_sbrk_r+0x1c>)
 80032d8:	2300      	movs	r3, #0
 80032da:	4604      	mov	r4, r0
 80032dc:	4608      	mov	r0, r1
 80032de:	602b      	str	r3, [r5, #0]
 80032e0:	f7fd fe9a 	bl	8001018 <_sbrk>
 80032e4:	1c43      	adds	r3, r0, #1
 80032e6:	d102      	bne.n	80032ee <_sbrk_r+0x1a>
 80032e8:	682b      	ldr	r3, [r5, #0]
 80032ea:	b103      	cbz	r3, 80032ee <_sbrk_r+0x1a>
 80032ec:	6023      	str	r3, [r4, #0]
 80032ee:	bd38      	pop	{r3, r4, r5, pc}
 80032f0:	20000378 	.word	0x20000378

080032f4 <__errno>:
 80032f4:	4b01      	ldr	r3, [pc, #4]	@ (80032fc <__errno+0x8>)
 80032f6:	6818      	ldr	r0, [r3, #0]
 80032f8:	4770      	bx	lr
 80032fa:	bf00      	nop
 80032fc:	2000012c 	.word	0x2000012c

08003300 <__libc_init_array>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	4d0d      	ldr	r5, [pc, #52]	@ (8003338 <__libc_init_array+0x38>)
 8003304:	4c0d      	ldr	r4, [pc, #52]	@ (800333c <__libc_init_array+0x3c>)
 8003306:	1b64      	subs	r4, r4, r5
 8003308:	10a4      	asrs	r4, r4, #2
 800330a:	2600      	movs	r6, #0
 800330c:	42a6      	cmp	r6, r4
 800330e:	d109      	bne.n	8003324 <__libc_init_array+0x24>
 8003310:	4d0b      	ldr	r5, [pc, #44]	@ (8003340 <__libc_init_array+0x40>)
 8003312:	4c0c      	ldr	r4, [pc, #48]	@ (8003344 <__libc_init_array+0x44>)
 8003314:	f000 f864 	bl	80033e0 <_init>
 8003318:	1b64      	subs	r4, r4, r5
 800331a:	10a4      	asrs	r4, r4, #2
 800331c:	2600      	movs	r6, #0
 800331e:	42a6      	cmp	r6, r4
 8003320:	d105      	bne.n	800332e <__libc_init_array+0x2e>
 8003322:	bd70      	pop	{r4, r5, r6, pc}
 8003324:	f855 3b04 	ldr.w	r3, [r5], #4
 8003328:	4798      	blx	r3
 800332a:	3601      	adds	r6, #1
 800332c:	e7ee      	b.n	800330c <__libc_init_array+0xc>
 800332e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003332:	4798      	blx	r3
 8003334:	3601      	adds	r6, #1
 8003336:	e7f2      	b.n	800331e <__libc_init_array+0x1e>
 8003338:	08003418 	.word	0x08003418
 800333c:	08003418 	.word	0x08003418
 8003340:	08003418 	.word	0x08003418
 8003344:	0800341c 	.word	0x0800341c

08003348 <__retarget_lock_acquire_recursive>:
 8003348:	4770      	bx	lr

0800334a <__retarget_lock_release_recursive>:
 800334a:	4770      	bx	lr

0800334c <_free_r>:
 800334c:	b538      	push	{r3, r4, r5, lr}
 800334e:	4605      	mov	r5, r0
 8003350:	2900      	cmp	r1, #0
 8003352:	d041      	beq.n	80033d8 <_free_r+0x8c>
 8003354:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003358:	1f0c      	subs	r4, r1, #4
 800335a:	2b00      	cmp	r3, #0
 800335c:	bfb8      	it	lt
 800335e:	18e4      	addlt	r4, r4, r3
 8003360:	f7ff ffa4 	bl	80032ac <__malloc_lock>
 8003364:	4a1d      	ldr	r2, [pc, #116]	@ (80033dc <_free_r+0x90>)
 8003366:	6813      	ldr	r3, [r2, #0]
 8003368:	b933      	cbnz	r3, 8003378 <_free_r+0x2c>
 800336a:	6063      	str	r3, [r4, #4]
 800336c:	6014      	str	r4, [r2, #0]
 800336e:	4628      	mov	r0, r5
 8003370:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003374:	f7ff bfa0 	b.w	80032b8 <__malloc_unlock>
 8003378:	42a3      	cmp	r3, r4
 800337a:	d908      	bls.n	800338e <_free_r+0x42>
 800337c:	6820      	ldr	r0, [r4, #0]
 800337e:	1821      	adds	r1, r4, r0
 8003380:	428b      	cmp	r3, r1
 8003382:	bf01      	itttt	eq
 8003384:	6819      	ldreq	r1, [r3, #0]
 8003386:	685b      	ldreq	r3, [r3, #4]
 8003388:	1809      	addeq	r1, r1, r0
 800338a:	6021      	streq	r1, [r4, #0]
 800338c:	e7ed      	b.n	800336a <_free_r+0x1e>
 800338e:	461a      	mov	r2, r3
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	b10b      	cbz	r3, 8003398 <_free_r+0x4c>
 8003394:	42a3      	cmp	r3, r4
 8003396:	d9fa      	bls.n	800338e <_free_r+0x42>
 8003398:	6811      	ldr	r1, [r2, #0]
 800339a:	1850      	adds	r0, r2, r1
 800339c:	42a0      	cmp	r0, r4
 800339e:	d10b      	bne.n	80033b8 <_free_r+0x6c>
 80033a0:	6820      	ldr	r0, [r4, #0]
 80033a2:	4401      	add	r1, r0
 80033a4:	1850      	adds	r0, r2, r1
 80033a6:	4283      	cmp	r3, r0
 80033a8:	6011      	str	r1, [r2, #0]
 80033aa:	d1e0      	bne.n	800336e <_free_r+0x22>
 80033ac:	6818      	ldr	r0, [r3, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	6053      	str	r3, [r2, #4]
 80033b2:	4408      	add	r0, r1
 80033b4:	6010      	str	r0, [r2, #0]
 80033b6:	e7da      	b.n	800336e <_free_r+0x22>
 80033b8:	d902      	bls.n	80033c0 <_free_r+0x74>
 80033ba:	230c      	movs	r3, #12
 80033bc:	602b      	str	r3, [r5, #0]
 80033be:	e7d6      	b.n	800336e <_free_r+0x22>
 80033c0:	6820      	ldr	r0, [r4, #0]
 80033c2:	1821      	adds	r1, r4, r0
 80033c4:	428b      	cmp	r3, r1
 80033c6:	bf04      	itt	eq
 80033c8:	6819      	ldreq	r1, [r3, #0]
 80033ca:	685b      	ldreq	r3, [r3, #4]
 80033cc:	6063      	str	r3, [r4, #4]
 80033ce:	bf04      	itt	eq
 80033d0:	1809      	addeq	r1, r1, r0
 80033d2:	6021      	streq	r1, [r4, #0]
 80033d4:	6054      	str	r4, [r2, #4]
 80033d6:	e7ca      	b.n	800336e <_free_r+0x22>
 80033d8:	bd38      	pop	{r3, r4, r5, pc}
 80033da:	bf00      	nop
 80033dc:	2000023c 	.word	0x2000023c

080033e0 <_init>:
 80033e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033e2:	bf00      	nop
 80033e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e6:	bc08      	pop	{r3}
 80033e8:	469e      	mov	lr, r3
 80033ea:	4770      	bx	lr

080033ec <_fini>:
 80033ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033ee:	bf00      	nop
 80033f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033f2:	bc08      	pop	{r3}
 80033f4:	469e      	mov	lr, r3
 80033f6:	4770      	bx	lr
